
OmegaVISP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00001aa4  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000116  00800172  00800172  00001c4a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000169  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000496  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d53  00000000  00000000  00002a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000037e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000232  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063e  00000000  00000000  00003b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	57 01       	movw	r10, r14
      4a:	e2 01       	movw	r28, r4
      4c:	6d 01       	movw	r12, r26
      4e:	ff 04       	cpc	r15, r15
      50:	ff 04       	cpc	r15, r15
      52:	0e 03       	fmul	r16, r22
      54:	ff 04       	cpc	r15, r15
      56:	ff 04       	cpc	r15, r15
      58:	ff 04       	cpc	r15, r15
      5a:	ff 04       	cpc	r15, r15
      5c:	ff 04       	cpc	r15, r15
      5e:	ff 04       	cpc	r15, r15
      60:	ff 04       	cpc	r15, r15
      62:	ff 04       	cpc	r15, r15
      64:	ff 04       	cpc	r15, r15
      66:	19 02       	muls	r17, r25
      68:	ec 04       	cpc	r14, r12
      6a:	8e 03       	fmulsu	r16, r22
      6c:	f5 03       	fmuls	r23, r21
      6e:	48 03       	fmul	r20, r16
      70:	ae 04       	cpc	r10, r14
      72:	74 04       	cpc	r7, r4
      74:	b1 02       	muls	r27, r17
      76:	9d 02       	muls	r25, r29
      78:	d8 02       	muls	r29, r24
      7a:	c9 02       	muls	r28, r25
      7c:	80 02       	muls	r24, r16
      7e:	f2 02       	muls	r31, r18

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d4 e0       	ldi	r29, 0x04	; 4
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	e4 ea       	ldi	r30, 0xA4	; 164
      94:	fa e1       	ldi	r31, 0x1A	; 26
      96:	02 c0       	rjmp	.+4      	; 0x9c <.do_copy_data_start>

00000098 <.do_copy_data_loop>:
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0

0000009c <.do_copy_data_start>:
      9c:	a2 37       	cpi	r26, 0x72	; 114
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <.do_copy_data_loop>

000000a2 <__do_clear_bss>:
      a2:	12 e0       	ldi	r17, 0x02	; 2
      a4:	a2 e7       	ldi	r26, 0x72	; 114
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a8 38       	cpi	r26, 0x88	; 136
      ae:	b1 07       	cpc	r27, r17
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
      b6:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <calcSckDur>:
        sck_dur = 0; 
      else if (freq >= 460800) 
        sck_dur = 1; 
      else if (freq >= 115200) 
        sck_dur = 2; 
      else if (freq >= 57600) 
      be:	21 ee       	ldi	r18, 0xE1	; 225
      c0:	80 30       	cpi	r24, 0x00	; 0
      c2:	92 07       	cpc	r25, r18
      c4:	10 f0       	brcs	.+4      	; 0xca <calcSckDur+0xc>
      c6:	63 e0       	ldi	r22, 0x03	; 3
      c8:	23 c0       	rjmp	.+70     	; 0x110 <calcSckDur+0x52>
        sck_dur = 3; 
      else 
        sck_dur = ceil(1/(2 * B * freq * T_STK500) - 10/B); 
      ca:	bc 01       	movw	r22, r24
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 02 0a 	call	0x1404	; 0x1404 <__floatunsisf>
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	40 ec       	ldi	r20, 0xC0	; 192
      da:	51 e4       	ldi	r21, 0x41	; 65
      dc:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
      e0:	21 eb       	ldi	r18, 0xB1	; 177
      e2:	31 ea       	ldi	r19, 0xA1	; 161
      e4:	41 e1       	ldi	r20, 0x11	; 17
      e6:	54 e3       	ldi	r21, 0x34	; 52
      e8:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	80 e8       	ldi	r24, 0x80	; 128
      f6:	9f e3       	ldi	r25, 0x3F	; 63
      f8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__divsf3>
      fc:	25 e5       	ldi	r18, 0x55	; 85
      fe:	35 e5       	ldi	r19, 0x55	; 85
     100:	45 e5       	ldi	r20, 0x55	; 85
     102:	5f e3       	ldi	r21, 0x3F	; 63
     104:	0e 94 1a 07 	call	0xe34	; 0xe34 <__subsf3>
     108:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ceil>
     10c:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
        sck_dur = 3; 
      else 
        sck_dur = ceil(1/(2 * B * freq * T_AVRISP) - 10/B); 
    } 
 
    return fmin(254, sck_dur);  // 255 is an illegal value 
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 02 0a 	call	0x1404	; 0x1404 <__floatunsisf>
     11a:	9b 01       	movw	r18, r22
     11c:	ac 01       	movw	r20, r24
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	8e e7       	ldi	r24, 0x7E	; 126
     124:	93 e4       	ldi	r25, 0x43	; 67
     126:	0e 94 c6 0c 	call	0x198c	; 0x198c <fmin>
     12a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
     12e:	dc 01       	movw	r26, r24
     130:	cb 01       	movw	r24, r22
} 
     132:	08 95       	ret

00000134 <sendHeader>:
		byte[2] = 0;
		byte[3] = 0;
		ISP_Swap((uint8_t*) &byte);
	}while(byte[3] == 1);
}
void sendHeader(uint16_t size){
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	8c 01       	movw	r16, r24
	UART_Tx_Checksum(MESSAGE_START, 0);
     13a:	8b e1       	ldi	r24, 0x1B	; 27
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
	UART_Tx_Checksum(sequenceNumber, 0);
     142:	80 91 69 00 	lds	r24, 0x0069
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
	UART_Tx_Checksum((uint8_t) (size>>8), 0);
     14c:	81 2f       	mov	r24, r17
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
	UART_Tx_Checksum((uint8_t) size, 0);
     154:	80 2f       	mov	r24, r16
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
	UART_Tx_Checksum(TOKEN, 0);
     15c:	8e e0       	ldi	r24, 0x0E	; 14
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
}
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	08 95       	ret

0000016a <readyBusyPolling>:

		
	}
	return 0;
}
void readyBusyPolling(void){
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	df 93       	push	r29
     172:	cf 93       	push	r28
     174:	00 d0       	rcall	.+0      	; 0x176 <readyBusyPolling+0xc>
     176:	00 d0       	rcall	.+0      	; 0x178 <readyBusyPolling+0xe>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte[4];
	do{
		byte[0] = 0xF0;
     17c:	80 ef       	ldi	r24, 0xF0	; 240
     17e:	f8 2e       	mov	r15, r24
		byte[1] = 0;
		byte[2] = 0;
		byte[3] = 0;
		ISP_Swap((uint8_t*) &byte);
     180:	8e 01       	movw	r16, r28
     182:	0f 5f       	subi	r16, 0xFF	; 255
     184:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}
void readyBusyPolling(void){
	uint8_t byte[4];
	do{
		byte[0] = 0xF0;
     186:	f9 82       	std	Y+1, r15	; 0x01
		byte[1] = 0;
     188:	1a 82       	std	Y+2, r1	; 0x02
		byte[2] = 0;
     18a:	1b 82       	std	Y+3, r1	; 0x03
		byte[3] = 0;
     18c:	1c 82       	std	Y+4, r1	; 0x04
		ISP_Swap((uint8_t*) &byte);
     18e:	c8 01       	movw	r24, r16
     190:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
	}while(byte[3] == 1);
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	b1 f3       	breq	.-20     	; 0x186 <readyBusyPolling+0x1c>
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	08 95       	ret

000001ae <main>:
#include <util/delay.h>

volatile uint8_t sequenceNumber = 1; //Current sequence number. Wraps around to 0 when overflows.
volatile uint8_t receiveBuffer[BUFFER_SIZE];
volatile uint8_t byteDelay = 0;
int main(void){
     1ae:	2f 92       	push	r2
     1b0:	3f 92       	push	r3
     1b2:	4f 92       	push	r4
     1b4:	5f 92       	push	r5
     1b6:	6f 92       	push	r6
     1b8:	7f 92       	push	r7
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	df 93       	push	r29
     1d0:	cf 93       	push	r28
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	69 97       	sbiw	r28, 0x19	; 25
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
	uint16_t messageSize = 0;
	uint16_t receiveSize = 0;
	uint8_t byte[4];
	DDRC = 0xff;
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
     1e6:	85 bb       	out	0x15, r24	; 21
	UART_init();
     1e8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <UART_init>
	SPI_init();
     1ec:	0e 94 16 05 	call	0xa2c	; 0xa2c <SPI_init>
     1f0:	19 8a       	std	Y+17, r1	; 0x11
     1f2:	18 8a       	std	Y+16, r1	; 0x10
     1f4:	22 24       	eor	r2, r2
     1f6:	33 24       	eor	r3, r3
     1f8:	21 01       	movw	r4, r2
	
	
	
	
	while(1){
		UART_Rx_Checksum(1);
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
		if(UART_Rx_Checksum(0) != MESSAGE_START) continue;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     206:	8b 31       	cpi	r24, 0x1B	; 27
     208:	c1 f7       	brne	.-16     	; 0x1fa <main+0x4c>
		sequenceNumber = UART_Rx_Checksum(0);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     210:	80 93 69 00 	sts	0x0069, r24
		messageSize = UART_Rx_Checksum(0)<<8;
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     21a:	8b 8b       	std	Y+19, r24	; 0x13
     21c:	1a 8a       	std	Y+18, r1	; 0x12
		messageSize|= UART_Rx_Checksum(0);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     224:	e8 2e       	mov	r14, r24
     226:	ff 24       	eor	r15, r15
     228:	2a 89       	ldd	r18, Y+18	; 0x12
     22a:	3b 89       	ldd	r19, Y+19	; 0x13
     22c:	e2 2a       	or	r14, r18
     22e:	f3 2a       	or	r15, r19
		if(UART_Rx_Checksum(0) != TOKEN) continue;
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     236:	8e 30       	cpi	r24, 0x0E	; 14
     238:	01 f7       	brne	.-64     	; 0x1fa <main+0x4c>
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	09 c0       	rjmp	.+18     	; 0x252 <main+0xa4>
		receiveSize = 0;
		while(receiveSize<messageSize){
			receiveBuffer[receiveSize++] = UART_Rx_Checksum(0);
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     246:	f8 01       	movw	r30, r16
     248:	eb 58       	subi	r30, 0x8B	; 139
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	80 83       	st	Z, r24
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
		sequenceNumber = UART_Rx_Checksum(0);
		messageSize = UART_Rx_Checksum(0)<<8;
		messageSize|= UART_Rx_Checksum(0);
		if(UART_Rx_Checksum(0) != TOKEN) continue;
		receiveSize = 0;
		while(receiveSize<messageSize){
     252:	0e 15       	cp	r16, r14
     254:	1f 05       	cpc	r17, r15
     256:	a0 f3       	brcs	.-24     	; 0x240 <main+0x92>
			receiveBuffer[receiveSize++] = UART_Rx_Checksum(0);
		}
		if(UART_Rx_Checksum(1) != UART_Rx_Checksum(0)){
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     25e:	18 2f       	mov	r17, r24
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_Rx_Checksum>
     266:	18 17       	cp	r17, r24
     268:	89 f0       	breq	.+34     	; 0x28c <main+0xde>
			sendHeader(2);
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
			UART_Tx_Checksum(ANSWER_CKSUM_ERROR, 0);
     272:	80 eb       	ldi	r24, 0xB0	; 176
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
			UART_Tx_Checksum(ANSWER_CKSUM_ERROR, 0);
     27a:	80 eb       	ldi	r24, 0xB0	; 176
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
			UART_Tx_Checksum(0,1);
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     28a:	b7 cf       	rjmp	.-146    	; 0x1fa <main+0x4c>


		uint16_t len;
		uint16_t i;

		switch(receiveBuffer[0]){
     28c:	80 91 75 01 	lds	r24, 0x0175
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	31 97       	sbiw	r30, 0x01	; 1
     296:	ec 31       	cpi	r30, 0x1C	; 28
     298:	f1 05       	cpc	r31, r1
     29a:	08 f0       	brcs	.+2      	; 0x29e <main+0xf0>
     29c:	b0 c3       	rjmp	.+1888   	; 0x9fe <__stack+0x59f>
     29e:	ec 5d       	subi	r30, 0xDC	; 220
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	05 90       	lpm	r0, Z+
     2a8:	f4 91       	lpm	r31, Z+
     2aa:	e0 2d       	mov	r30, r0
     2ac:	09 94       	ijmp


			case CMD_SIGN_ON: 	
				sendHeader(11);
     2ae:	8b e0       	ldi	r24, 0x0B	; 11
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_SIGN_ON, 0);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(0x08, 0);
     2c6:	88 e0       	ldi	r24, 0x08	; 8
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_String((uint8_t*) &REPLY_CMD_SIGNON, 8);
     2ce:	80 e6       	ldi	r24, 0x60	; 96
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	68 e0       	ldi	r22, 0x08	; 8
     2d4:	0e 94 6d 05 	call	0xada	; 0xada <UART_Tx_String>
     2d8:	9f c3       	rjmp	.+1854   	; 0xa18 <__stack+0x5b9>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_GET_PARAMETER:
				if(receiveBuffer[1] == PARAM_HW_VER){
     2da:	80 91 76 01 	lds	r24, 0x0176
     2de:	80 39       	cpi	r24, 0x90	; 144
     2e0:	71 f4       	brne	.+28     	; 0x2fe <main+0x150>
					sendHeader(3);
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(0x01, 0);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	8a c3       	rjmp	.+1812   	; 0xa12 <__stack+0x5b3>


				}else if(receiveBuffer[1] == PARAM_SW_MAJOR){
     2fe:	80 91 76 01 	lds	r24, 0x0176
     302:	81 39       	cpi	r24, 0x91	; 145
     304:	71 f4       	brne	.+28     	; 0x322 <main+0x174>
					sendHeader(3);
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(0x02, 0);
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	78 c3       	rjmp	.+1776   	; 0xa12 <__stack+0x5b3>


				}else if(receiveBuffer[1] == PARAM_SW_MINOR){
     322:	80 91 76 01 	lds	r24, 0x0176
     326:	82 39       	cpi	r24, 0x92	; 146
     328:	71 f4       	brne	.+28     	; 0x346 <main+0x198>
					sendHeader(3);
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(0x0A, 0);
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	66 c3       	rjmp	.+1740   	; 0xa12 <__stack+0x5b3>


				}else if(receiveBuffer[1] == PARAM_TOPCARD_DETECT){
     346:	80 91 76 01 	lds	r24, 0x0176
     34a:	8a 39       	cpi	r24, 0x9A	; 154
     34c:	71 f4       	brne	.+28     	; 0x36a <main+0x1bc>
					sendHeader(3);
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(0xFF, 0);
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	54 c3       	rjmp	.+1704   	; 0xa12 <__stack+0x5b3>


				}else if(receiveBuffer[1] == PARAM_SCK_DURATION){
     36a:	80 91 76 01 	lds	r24, 0x0176
     36e:	88 39       	cpi	r24, 0x98	; 152
     370:	89 f4       	brne	.+34     	; 0x394 <main+0x1e6>
					sendHeader(3);
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(calcSckDur((uint16_t) F_CPU), 0);
     38a:	80 e1       	ldi	r24, 0x10	; 16
     38c:	95 e7       	ldi	r25, 0x75	; 117
     38e:	0e 94 5f 00 	call	0xbe	; 0xbe <calcSckDur>
     392:	3f c3       	rjmp	.+1662   	; 0xa12 <__stack+0x5b3>


				}else if(receiveBuffer[1] == PARAM_CONTROLLER_INIT){
     394:	80 91 76 01 	lds	r24, 0x0176
     398:	8f 39       	cpi	r24, 0x9F	; 159
     39a:	71 f4       	brne	.+28     	; 0x3b8 <main+0x20a>
					sendHeader(3);
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(STATUS_CMD_OK, 0);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					UART_Tx_Checksum(status, 0);
     3b4:	89 89       	ldd	r24, Y+17	; 0x11
     3b6:	2d c3       	rjmp	.+1626   	; 0xa12 <__stack+0x5b3>


				}else{
					sendHeader(2);
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_GET_PARAMETER, 0);
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	2d c0       	rjmp	.+90     	; 0x41e <main+0x270>
					UART_Tx_Checksum(0,1);
				break;


			case CMD_SET_PARAMETER:
				if(receiveBuffer[1] == PARAM_HW_VER){
     3c4:	80 91 76 01 	lds	r24, 0x0176
     3c8:	80 39       	cpi	r24, 0x90	; 144
     3ca:	69 f1       	breq	.+90     	; 0x426 <main+0x278>


				}else if(receiveBuffer[1] == PARAM_SW_MAJOR){
     3cc:	80 91 76 01 	lds	r24, 0x0176
     3d0:	81 39       	cpi	r24, 0x91	; 145
     3d2:	49 f1       	breq	.+82     	; 0x426 <main+0x278>


				}else if(receiveBuffer[1] == PARAM_SW_MINOR){
     3d4:	80 91 76 01 	lds	r24, 0x0176
     3d8:	82 39       	cpi	r24, 0x92	; 146
     3da:	29 f1       	breq	.+74     	; 0x426 <main+0x278>


				}else if(receiveBuffer[1] == PARAM_TOPCARD_DETECT){
     3dc:	80 91 76 01 	lds	r24, 0x0176
     3e0:	8a 39       	cpi	r24, 0x9A	; 154
     3e2:	09 f1       	breq	.+66     	; 0x426 <main+0x278>


				}else if(receiveBuffer[1] == PARAM_RESET_POLARITY){
     3e4:	80 91 76 01 	lds	r24, 0x0176
     3e8:	8e 39       	cpi	r24, 0x9E	; 158
     3ea:	41 f4       	brne	.+16     	; 0x3fc <main+0x24e>
					reset = !receiveBuffer[2];
     3ec:	80 91 77 01 	lds	r24, 0x0177
     3f0:	18 8a       	std	Y+16, r1	; 0x10
     3f2:	88 23       	and	r24, r24
     3f4:	c1 f4       	brne	.+48     	; 0x426 <main+0x278>
     3f6:	31 e0       	ldi	r19, 0x01	; 1
     3f8:	38 8b       	std	Y+16, r19	; 0x10
     3fa:	15 c0       	rjmp	.+42     	; 0x426 <main+0x278>

				}else if(receiveBuffer[1] == PARAM_SCK_DURATION){
     3fc:	80 91 76 01 	lds	r24, 0x0176
     400:	88 39       	cpi	r24, 0x98	; 152
     402:	89 f0       	breq	.+34     	; 0x426 <main+0x278>


				}else if(receiveBuffer[1] == PARAM_CONTROLLER_INIT){
     404:	80 91 76 01 	lds	r24, 0x0176
     408:	8f 39       	cpi	r24, 0x9F	; 159
     40a:	21 f4       	brne	.+8      	; 0x414 <main+0x266>
					status = receiveBuffer[2];
     40c:	80 91 77 01 	lds	r24, 0x0177
     410:	89 8b       	std	Y+17, r24	; 0x11
     412:	09 c0       	rjmp	.+18     	; 0x426 <main+0x278>

				}else{
					sendHeader(2);
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
					UART_Tx_Checksum(CMD_SET_PARAMETER, 0);
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     424:	6b c0       	rjmp	.+214    	; 0x4fc <__stack+0x9d>
					UART_Tx_Checksum(STATUS_CMD_FAILED, 0);
					UART_Tx_Checksum(0,1);
					break;
				}
				sendHeader(2);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_SET_PARAMETER, 0);
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	e1 c2       	rjmp	.+1474   	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_ENTER_PROGMODE_ISP: 
				PORTB = reset ? setPin(DD_RESET, PORTB) : clrPin(DD_RESET, PORTB);
     432:	98 89       	ldd	r25, Y+16	; 0x10
     434:	99 23       	and	r25, r25
     436:	19 f0       	breq	.+6      	; 0x43e <main+0x290>
     438:	88 b3       	in	r24, 0x18	; 24
     43a:	80 61       	ori	r24, 0x10	; 16
     43c:	02 c0       	rjmp	.+4      	; 0x442 <main+0x294>
     43e:	88 b3       	in	r24, 0x18	; 24
     440:	8f 7e       	andi	r24, 0xEF	; 239
     442:	88 bb       	out	0x18, r24	; 24
				_delay_ms(receiveBuffer[3]);//Wait for pins to stabilize
     444:	60 91 78 01 	lds	r22, 0x0178
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__floatunsisf>
     452:	5b 01       	movw	r10, r22
     454:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e5       	ldi	r19, 0x50	; 80
     45a:	46 ee       	ldi	r20, 0xE6	; 230
     45c:	54 e4       	ldi	r21, 0x44	; 68
     45e:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
     462:	7b 01       	movw	r14, r22
     464:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5f e3       	ldi	r21, 0x3F	; 63
     46e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__ltsf2>
     472:	88 23       	and	r24, r24
     474:	1c f4       	brge	.+6      	; 0x47c <__stack+0x1d>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	23 c0       	rjmp	.+70     	; 0x4c2 <__stack+0x63>
		__ticks = 1;
	else if (__tmp > 65535)
     47c:	c8 01       	movw	r24, r16
     47e:	b7 01       	movw	r22, r14
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	3f ef       	ldi	r19, 0xFF	; 255
     484:	4f e7       	ldi	r20, 0x7F	; 127
     486:	57 e4       	ldi	r21, 0x47	; 71
     488:	0e 94 1e 09 	call	0x123c	; 0x123c <__gtsf2>
     48c:	18 16       	cp	r1, r24
     48e:	ac f4       	brge	.+42     	; 0x4ba <__stack+0x5b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     490:	c6 01       	movw	r24, r12
     492:	b5 01       	movw	r22, r10
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e2       	ldi	r20, 0x20	; 32
     49a:	51 e4       	ldi	r21, 0x41	; 65
     49c:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
     4a0:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <__stack+0x53>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a6:	88 eb       	ldi	r24, 0xB8	; 184
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <__stack+0x4b>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ae:	61 50       	subi	r22, 0x01	; 1
     4b0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b2:	61 15       	cp	r22, r1
     4b4:	71 05       	cpc	r23, r1
     4b6:	b9 f7       	brne	.-18     	; 0x4a6 <__stack+0x47>
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__stack+0x69>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ba:	c8 01       	movw	r24, r16
     4bc:	b7 01       	movw	r22, r14
     4be:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
     4c2:	cb 01       	movw	r24, r22
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__stack+0x65>

				byteDelay = receiveBuffer[5];
     4c8:	80 91 7a 01 	lds	r24, 0x017A
     4cc:	80 93 72 01 	sts	0x0172, r24

				byte[0] = PROGRAMMING_ENABLE_0;
     4d0:	8c ea       	ldi	r24, 0xAC	; 172
     4d2:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = PROGRAMMING_ENABLE_1;
     4d4:	83 e5       	ldi	r24, 0x53	; 83
     4d6:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = 0;
     4d8:	1b 82       	std	Y+3, r1	; 0x03
				byte[3] = 0;
     4da:	1c 82       	std	Y+4, r1	; 0x04
				ISP_Swap((uint8_t*) &byte);
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>

				sendHeader(2);
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_ENTER_PROGMODE_ISP, 0);
     4ec:	80 e1       	ldi	r24, 0x10	; 16
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(byte[2] == PROGRAMMING_ENABLE_1 ? STATUS_CMD_OK : STATUS_CMD_FAILED, 0);
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	83 35       	cpi	r24, 0x53	; 83
     4f8:	09 f4       	brne	.+2      	; 0x4fc <__stack+0x9d>
     4fa:	7f c2       	rjmp	.+1278   	; 0x9fa <__stack+0x59b>
     4fc:	80 ec       	ldi	r24, 0xC0	; 192
     4fe:	89 c2       	rjmp	.+1298   	; 0xa12 <__stack+0x5b3>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_READ_SIGNATURE_ISP: 
				PORTC = 0xf0;
     500:	80 ef       	ldi	r24, 0xF0	; 240
     502:	85 bb       	out	0x15, r24	; 21
				byte[0] = READ_DEVICE_CODE;
     504:	80 e3       	ldi	r24, 0x30	; 48
     506:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = 5;
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = receiveBuffer[4];
     50c:	80 91 79 01 	lds	r24, 0x0179
     510:	8b 83       	std	Y+3, r24	; 0x03
				byte[3] = 15;//receiveBuffer[4] == 0 ? 0x1E : (receiveBuffer[4] == 1 ? 0x94 : 0x06);
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	8c 83       	std	Y+4, r24	; 0x04
				ISP_Swap((uint8_t*) &byte);
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(4);
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_SIGNATURE_ISP, 0);
     526:	8b e1       	ldi	r24, 0x1B	; 27
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(byte[3], 0);
     536:	8c 81       	ldd	r24, Y+4	; 0x04
     538:	5d c2       	rjmp	.+1210   	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_READ_FUSE_ISP: 
				PORTC = 0xf0;
     53a:	80 ef       	ldi	r24, 0xF0	; 240
     53c:	85 bb       	out	0x15, r24	; 21
				byte[0] = receiveBuffer[2];
     53e:	80 91 77 01 	lds	r24, 0x0177
     542:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = receiveBuffer[3];
     544:	80 91 78 01 	lds	r24, 0x0178
     548:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = 0;
     54a:	1b 82       	std	Y+3, r1	; 0x03
				byte[3] = 0;
     54c:	1c 82       	std	Y+4, r1	; 0x04
				ISP_Swap((uint8_t*) &byte);
     54e:	ce 01       	movw	r24, r28
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(4);
     556:	84 e0       	ldi	r24, 0x04	; 4
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_FUSE_ISP, 0);
     55e:	88 e1       	ldi	r24, 0x18	; 24
     560:	4f c0       	rjmp	.+158    	; 0x600 <__stack+0x1a1>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_PROGRAM_FUSE_ISP: 
				PORTC = 0xf0;
     562:	80 ef       	ldi	r24, 0xF0	; 240
     564:	85 bb       	out	0x15, r24	; 21
				byte[0] = receiveBuffer[1];
     566:	80 91 76 01 	lds	r24, 0x0176
     56a:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = receiveBuffer[2];
     56c:	80 91 77 01 	lds	r24, 0x0177
     570:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = receiveBuffer[3];
     572:	80 91 78 01 	lds	r24, 0x0178
     576:	8b 83       	std	Y+3, r24	; 0x03
				byte[3] = receiveBuffer[4];
     578:	80 91 79 01 	lds	r24, 0x0179
     57c:	8c 83       	std	Y+4, r24	; 0x04
				ISP_Swap((uint8_t*) &byte);
     57e:	ce 01       	movw	r24, r28
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(3);
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_PROGRAM_FUSE_ISP, 0);
     58e:	87 e1       	ldi	r24, 0x17	; 23
     590:	24 c0       	rjmp	.+72     	; 0x5da <__stack+0x17b>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_READ_LOCK_ISP:
				byte[0] = READ_LOCK_BIT;
     592:	88 e5       	ldi	r24, 0x58	; 88
     594:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = 0;
     596:	1a 82       	std	Y+2, r1	; 0x02
				byte[2] = 0;
     598:	1b 82       	std	Y+3, r1	; 0x03
				byte[3] = 0;
     59a:	1c 82       	std	Y+4, r1	; 0x04
				ISP_Swap((uint8_t*) &byte);
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(4);
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_LOCK_ISP, 0);
     5ac:	8a e1       	ldi	r24, 0x1A	; 26
     5ae:	28 c0       	rjmp	.+80     	; 0x600 <__stack+0x1a1>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_PROGRAM_LOCK_ISP:
				byte[0] = receiveBuffer[1];
     5b0:	80 91 76 01 	lds	r24, 0x0176
     5b4:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = receiveBuffer[2];
     5b6:	80 91 77 01 	lds	r24, 0x0177
     5ba:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = receiveBuffer[3];
     5bc:	80 91 78 01 	lds	r24, 0x0178
     5c0:	8b 83       	std	Y+3, r24	; 0x03
				byte[3] = receiveBuffer[4];
     5c2:	80 91 79 01 	lds	r24, 0x0179
     5c6:	8c 83       	std	Y+4, r24	; 0x04
				ISP_Swap((uint8_t*) &byte);
     5c8:	ce 01       	movw	r24, r28
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(3);
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_PROGRAM_LOCK_ISP, 0);
     5d8:	89 e1       	ldi	r24, 0x19	; 25
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	08 c2       	rjmp	.+1040   	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_READ_OSCCAL_ISP:
				byte[0] = READ_OSCCAL_BYTE;
     5e4:	88 e3       	ldi	r24, 0x38	; 56
     5e6:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = 0;
     5e8:	1a 82       	std	Y+2, r1	; 0x02
				byte[2] = 0;
     5ea:	1b 82       	std	Y+3, r1	; 0x03
				byte[3] = 0;
     5ec:	1c 82       	std	Y+4, r1	; 0x04
				ISP_Swap((uint8_t*) &byte);
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				sendHeader(4);
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_OSCCAL_ISP, 0);
     5fe:	8c e1       	ldi	r24, 0x1C	; 28
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(byte[receiveBuffer[1]-1], 0);
     60e:	80 91 76 01 	lds	r24, 0x0176
     612:	fe 01       	movw	r30, r28
     614:	e8 0f       	add	r30, r24
     616:	f1 1d       	adc	r31, r1
     618:	80 81       	ld	r24, Z
     61a:	ec c1       	rjmp	.+984    	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_LOAD_ADDRESS: 
				address = receiveBuffer[4];
     61c:	20 91 79 01 	lds	r18, 0x0179
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
				address |= receiveBuffer[3]<<8;
     626:	80 91 78 01 	lds	r24, 0x0178
				address |= receiveBuffer[2]<<16;
     62a:	90 91 77 01 	lds	r25, 0x0177
				address |= receiveBuffer[1]<<24;
     62e:	60 91 76 01 	lds	r22, 0x0176
				UART_Tx_Checksum(0,1);
				break;

			case CMD_LOAD_ADDRESS: 
				address = receiveBuffer[4];
				address |= receiveBuffer[3]<<8;
     632:	8d 8b       	std	Y+21, r24	; 0x15
     634:	1c 8a       	std	Y+20, r1	; 0x14
     636:	ec 89       	ldd	r30, Y+20	; 0x14
     638:	fd 89       	ldd	r31, Y+21	; 0x15
     63a:	1f 01       	movw	r2, r30
     63c:	44 24       	eor	r4, r4
     63e:	37 fc       	sbrc	r3, 7
     640:	40 94       	com	r4
     642:	54 2c       	mov	r5, r4
     644:	99 27       	eor	r25, r25
     646:	9f 8b       	std	Y+23, r25	; 0x17
     648:	1e 8a       	std	Y+22, r1	; 0x16
     64a:	ee 89       	ldd	r30, Y+22	; 0x16
     64c:	ff 89       	ldd	r31, Y+23	; 0x17
     64e:	cf 01       	movw	r24, r30
     650:	aa 27       	eor	r26, r26
     652:	97 fd       	sbrc	r25, 7
     654:	a0 95       	com	r26
     656:	ba 2f       	mov	r27, r26
     658:	28 2a       	or	r2, r24
     65a:	39 2a       	or	r3, r25
     65c:	4a 2a       	or	r4, r26
     65e:	5b 2a       	or	r5, r27
				address |= receiveBuffer[2]<<16;
     660:	22 2a       	or	r2, r18
     662:	33 2a       	or	r3, r19
     664:	44 2a       	or	r4, r20
     666:	55 2a       	or	r5, r21
				address |= receiveBuffer[1]<<24;
     668:	66 27       	eor	r22, r22
     66a:	69 8f       	std	Y+25, r22	; 0x19
     66c:	18 8e       	std	Y+24, r1	; 0x18
     66e:	28 8d       	ldd	r18, Y+24	; 0x18
     670:	39 8d       	ldd	r19, Y+25	; 0x19
     672:	c9 01       	movw	r24, r18
     674:	aa 27       	eor	r26, r26
     676:	97 fd       	sbrc	r25, 7
     678:	a0 95       	com	r26
     67a:	ba 2f       	mov	r27, r26
     67c:	28 2a       	or	r2, r24
     67e:	39 2a       	or	r3, r25
     680:	4a 2a       	or	r4, r26
     682:	5b 2a       	or	r5, r27
				sendHeader(2);
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_LOAD_ADDRESS, 0);
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	b2 c1       	rjmp	.+868    	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_READ_FLASH_ISP:
				len = receiveBuffer[1]<<8;
     690:	80 91 76 01 	lds	r24, 0x0176
     694:	8f 87       	std	Y+15, r24	; 0x0f
     696:	1e 86       	std	Y+14, r1	; 0x0e
				len|= receiveBuffer[2];
     698:	80 91 77 01 	lds	r24, 0x0177
     69c:	a8 2e       	mov	r10, r24
     69e:	bb 24       	eor	r11, r11
     6a0:	8e 85       	ldd	r24, Y+14	; 0x0e
     6a2:	9f 85       	ldd	r25, Y+15	; 0x0f
     6a4:	a8 2a       	or	r10, r24
     6a6:	b9 2a       	or	r11, r25
				sendHeader(len+3);
     6a8:	c5 01       	movw	r24, r10
     6aa:	03 96       	adiw	r24, 0x03	; 3
     6ac:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_FLASH_ISP, 0);
     6b0:	84 e1       	ldi	r24, 0x14	; 20
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     6c0:	cc 24       	eor	r12, r12
     6c2:	dd 24       	eor	r13, r13
     6c4:	27 c0       	rjmp	.+78     	; 0x714 <__stack+0x2b5>
				for(i=0; i<len; i+=2){
					byte[0] = READ_FLASH_LOW_BYTE;
     6c6:	90 e2       	ldi	r25, 0x20	; 32
     6c8:	99 83       	std	Y+1, r25	; 0x01
					byte[1] = (uint8_t)(address>>8);
     6ca:	11 27       	eor	r17, r17
     6cc:	05 2d       	mov	r16, r5
     6ce:	f4 2c       	mov	r15, r4
     6d0:	e3 2c       	mov	r14, r3
     6d2:	ea 82       	std	Y+2, r14	; 0x02
					byte[2] = (uint8_t)(address>>0);
     6d4:	2b 82       	std	Y+3, r2	; 0x03
					byte[3] = 0;
     6d6:	1c 82       	std	Y+4, r1	; 0x04
					ISP_Swap((uint8_t*) &byte);
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					UART_Tx_Checksum(byte[3], 0);
     6e0:	8c 81       	ldd	r24, Y+4	; 0x04
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>

					
					byte[0] = READ_FLASH_HIGH_BYTE;
     6e8:	e8 e2       	ldi	r30, 0x28	; 40
     6ea:	e9 83       	std	Y+1, r30	; 0x01
					byte[1] = (uint8_t)(address>>8);
     6ec:	ea 82       	std	Y+2, r14	; 0x02
					byte[2] = (uint8_t)(address>>0);
     6ee:	2b 82       	std	Y+3, r2	; 0x03
					byte[3] = 0;
     6f0:	1c 82       	std	Y+4, r1	; 0x04
					ISP_Swap((uint8_t*) &byte);
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					UART_Tx_Checksum(byte[3], 0);
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					
					address++;
     702:	08 94       	sec
     704:	21 1c       	adc	r2, r1
     706:	31 1c       	adc	r3, r1
     708:	41 1c       	adc	r4, r1
     70a:	51 1c       	adc	r5, r1
				len = receiveBuffer[1]<<8;
				len|= receiveBuffer[2];
				sendHeader(len+3);
				UART_Tx_Checksum(CMD_READ_FLASH_ISP, 0);
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				for(i=0; i<len; i+=2){
     70c:	22 e0       	ldi	r18, 0x02	; 2
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	c2 0e       	add	r12, r18
     712:	d3 1e       	adc	r13, r19
     714:	ca 14       	cp	r12, r10
     716:	db 04       	cpc	r13, r11
     718:	b0 f2       	brcs	.-84     	; 0x6c6 <__stack+0x267>
     71a:	6f c1       	rjmp	.+734    	; 0x9fa <__stack+0x59b>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_CHIP_ERASE_ISP: 
				sendHeader(2);
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				byte[0] = PERFORM_CHIP_ERASE_0;
     724:	8c ea       	ldi	r24, 0xAC	; 172
     726:	89 83       	std	Y+1, r24	; 0x01
				byte[1] = PERFORM_CHIP_ERASE_1;
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	8a 83       	std	Y+2, r24	; 0x02
				byte[2] = 0;
     72c:	1b 82       	std	Y+3, r1	; 0x03
				byte[3] = 0;
     72e:	1c 82       	std	Y+4, r1	; 0x04
				ISP_Swap((uint8_t*) &byte);
     730:	ce 01       	movw	r24, r28
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
				
				if(receiveBuffer[2]){
     738:	80 91 77 01 	lds	r24, 0x0177
     73c:	88 23       	and	r24, r24
     73e:	19 f0       	breq	.+6      	; 0x746 <__stack+0x2e7>
					readyBusyPolling();
     740:	0e 94 b5 00 	call	0x16a	; 0x16a <readyBusyPolling>
     744:	42 c0       	rjmp	.+132    	; 0x7ca <__stack+0x36b>
				}else{
					_delay_ms(receiveBuffer[1]);
     746:	60 91 76 01 	lds	r22, 0x0176
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 02 0a 	call	0x1404	; 0x1404 <__floatunsisf>
     754:	5b 01       	movw	r10, r22
     756:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e5       	ldi	r19, 0x50	; 80
     75c:	46 ee       	ldi	r20, 0xE6	; 230
     75e:	54 e4       	ldi	r21, 0x44	; 68
     760:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
     764:	7b 01       	movw	r14, r22
     766:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e8       	ldi	r20, 0x80	; 128
     76e:	5f e3       	ldi	r21, 0x3F	; 63
     770:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__ltsf2>
     774:	88 23       	and	r24, r24
     776:	1c f4       	brge	.+6      	; 0x77e <__stack+0x31f>
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	23 c0       	rjmp	.+70     	; 0x7c4 <__stack+0x365>
		__ticks = 1;
	else if (__tmp > 65535)
     77e:	c8 01       	movw	r24, r16
     780:	b7 01       	movw	r22, r14
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	3f ef       	ldi	r19, 0xFF	; 255
     786:	4f e7       	ldi	r20, 0x7F	; 127
     788:	57 e4       	ldi	r21, 0x47	; 71
     78a:	0e 94 1e 09 	call	0x123c	; 0x123c <__gtsf2>
     78e:	18 16       	cp	r1, r24
     790:	ac f4       	brge	.+42     	; 0x7bc <__stack+0x35d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     792:	c6 01       	movw	r24, r12
     794:	b5 01       	movw	r22, r10
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e2       	ldi	r20, 0x20	; 32
     79c:	51 e4       	ldi	r21, 0x41	; 65
     79e:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsf3>
     7a2:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
     7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <__stack+0x355>
     7a8:	88 eb       	ldi	r24, 0xB8	; 184
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <__stack+0x34d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b0:	61 50       	subi	r22, 0x01	; 1
     7b2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b4:	61 15       	cp	r22, r1
     7b6:	71 05       	cpc	r23, r1
     7b8:	b9 f7       	brne	.-18     	; 0x7a8 <__stack+0x349>
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <__stack+0x36b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fixunssfsi>
     7c4:	cb 01       	movw	r24, r22
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <__stack+0x367>
				}

				address = 0;

				UART_Tx_Checksum(CMD_CHIP_ERASE_ISP, 0);
     7ca:	82 e1       	ldi	r24, 0x12	; 18
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(0,1);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     7e2:	22 24       	eor	r2, r2
     7e4:	33 24       	eor	r3, r3
     7e6:	21 01       	movw	r4, r2
     7e8:	1b c1       	rjmp	.+566    	; 0xa20 <__stack+0x5c1>
				break;


			case CMD_PROGRAM_FLASH_ISP: 
				len = receiveBuffer[1]<<8;
     7ea:	80 91 76 01 	lds	r24, 0x0176
     7ee:	8c 87       	std	Y+12, r24	; 0x0c
     7f0:	1b 86       	std	Y+11, r1	; 0x0b
				len|= receiveBuffer[2];
     7f2:	80 91 77 01 	lds	r24, 0x0177
     7f6:	e8 2f       	mov	r30, r24
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     7fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7fe:	2e 2b       	or	r18, r30
     800:	3f 2b       	or	r19, r31
     802:	3a 87       	std	Y+10, r19	; 0x0a
     804:	29 87       	std	Y+9, r18	; 0x09
				writeMem = getPin(0, receiveBuffer[3]) ? receiveBuffer[5] : receiveBuffer[6];
     806:	80 91 78 01 	lds	r24, 0x0178
     80a:	80 ff       	sbrs	r24, 0
     80c:	03 c0       	rjmp	.+6      	; 0x814 <__stack+0x3b5>
     80e:	80 91 7a 01 	lds	r24, 0x017A
     812:	02 c0       	rjmp	.+4      	; 0x818 <__stack+0x3b9>
     814:	80 91 7b 01 	lds	r24, 0x017B
     818:	88 24       	eor	r8, r8
     81a:	99 24       	eor	r9, r9
     81c:	59 c0       	rjmp	.+178    	; 0x8d0 <__stack+0x471>
				i = 0;
				uint8_t count, top;
				
				
				while(i<len){
					if(len-i<64){
     81e:	89 85       	ldd	r24, Y+9	; 0x09
     820:	9a 85       	ldd	r25, Y+10	; 0x0a
     822:	88 19       	sub	r24, r8
     824:	99 09       	sbc	r25, r9
     826:	80 34       	cpi	r24, 0x40	; 64
     828:	91 05       	cpc	r25, r1
     82a:	18 f0       	brcs	.+6      	; 0x832 <__stack+0x3d3>
     82c:	30 e4       	ldi	r19, 0x40	; 64
     82e:	3d 87       	std	Y+13, r19	; 0x0d
     830:	03 c0       	rjmp	.+6      	; 0x838 <__stack+0x3d9>
						top = len-i;
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	88 19       	sub	r24, r8
     836:	8d 87       	std	Y+13, r24	; 0x0d
     838:	6a e0       	ldi	r22, 0x0A	; 10
     83a:	66 2e       	mov	r6, r22
     83c:	71 2c       	mov	r7, r1
     83e:	68 0c       	add	r6, r8
     840:	79 1c       	adc	r7, r9
     842:	62 01       	movw	r12, r4
     844:	51 01       	movw	r10, r2
     846:	27 c0       	rjmp	.+78     	; 0x896 <__stack+0x437>
					}else{
						top = 64;
					}
					for(count=0; count<top; i+=2, count++,	address++){
						byte[0] = 0x40;
     848:	90 e4       	ldi	r25, 0x40	; 64
     84a:	99 83       	std	Y+1, r25	; 0x01
						byte[1] = (uint8_t)(address>>8);
     84c:	11 27       	eor	r17, r17
     84e:	0d 2d       	mov	r16, r13
     850:	fc 2c       	mov	r15, r12
     852:	eb 2c       	mov	r14, r11
     854:	ea 82       	std	Y+2, r14	; 0x02
						byte[2] = (uint8_t)(address>>0);
     856:	ab 82       	std	Y+3, r10	; 0x03
						byte[3] = receiveBuffer[i+10];
     858:	f3 01       	movw	r30, r6
     85a:	eb 58       	subi	r30, 0x8B	; 139
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	80 81       	ld	r24, Z
     860:	8c 83       	std	Y+4, r24	; 0x04
						ISP_Swap((uint8_t*) &byte);
     862:	ce 01       	movw	r24, r28
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
						//_delay_ms(receiveBuffer[4]);

						byte[0] = 0x48;
     86a:	e8 e4       	ldi	r30, 0x48	; 72
     86c:	e9 83       	std	Y+1, r30	; 0x01
						byte[1] = (uint8_t)(address>>8);
     86e:	ea 82       	std	Y+2, r14	; 0x02
						byte[2] = (uint8_t)(address>>0);
     870:	ab 82       	std	Y+3, r10	; 0x03
						byte[3] = receiveBuffer[i+11];
     872:	f3 01       	movw	r30, r6
     874:	ea 58       	subi	r30, 0x8A	; 138
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 81       	ld	r24, Z
     87a:	8c 83       	std	Y+4, r24	; 0x04
						ISP_Swap((uint8_t*) &byte);
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					if(len-i<64){
						top = len-i;
					}else{
						top = 64;
					}
					for(count=0; count<top; i+=2, count++,	address++){
     884:	08 94       	sec
     886:	a1 1c       	adc	r10, r1
     888:	b1 1c       	adc	r11, r1
     88a:	c1 1c       	adc	r12, r1
     88c:	d1 1c       	adc	r13, r1
     88e:	22 e0       	ldi	r18, 0x02	; 2
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	62 0e       	add	r6, r18
     894:	73 1e       	adc	r7, r19
     896:	8a 2d       	mov	r24, r10
     898:	82 19       	sub	r24, r2
     89a:	3d 85       	ldd	r19, Y+13	; 0x0d
     89c:	83 17       	cp	r24, r19
     89e:	a0 f2       	brcs	.-88     	; 0x848 <__stack+0x3e9>
     8a0:	83 2f       	mov	r24, r19
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	88 0e       	add	r8, r24
     8aa:	99 1e       	adc	r9, r25
     8ac:	23 0e       	add	r2, r19
     8ae:	31 1c       	adc	r3, r1
     8b0:	41 1c       	adc	r4, r1
     8b2:	51 1c       	adc	r5, r1
						byte[2] = (uint8_t)(address>>0);
						byte[3] = receiveBuffer[i+11];
						ISP_Swap((uint8_t*) &byte);
						//_delay_ms(receiveBuffer[4]);
					}
					uint16_t pageno = address-64;
     8b4:	c1 01       	movw	r24, r2
     8b6:	80 54       	subi	r24, 0x40	; 64
     8b8:	90 40       	sbci	r25, 0x00	; 0
					byte[0] = 0x4C;
     8ba:	ec e4       	ldi	r30, 0x4C	; 76
     8bc:	e9 83       	std	Y+1, r30	; 0x01
					byte[1] = (uint8_t)(pageno>>8);
     8be:	9a 83       	std	Y+2, r25	; 0x02
					byte[2] = (uint8_t)(pageno>>0);
     8c0:	8b 83       	std	Y+3, r24	; 0x03
					byte[3] = 0;
     8c2:	1c 82       	std	Y+4, r1	; 0x04
					ISP_Swap((uint8_t*) &byte);
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					
					readyBusyPolling();
     8cc:	0e 94 b5 00 	call	0x16a	; 0x16a <readyBusyPolling>
				writeMem = getPin(0, receiveBuffer[3]) ? receiveBuffer[5] : receiveBuffer[6];
				i = 0;
				uint8_t count, top;
				
				
				while(i<len){
     8d0:	29 85       	ldd	r18, Y+9	; 0x09
     8d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d4:	82 16       	cp	r8, r18
     8d6:	93 06       	cpc	r9, r19
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x47d>
     8da:	a1 cf       	rjmp	.-190    	; 0x81e <__stack+0x3bf>
					readyBusyPolling();
					//_delay_ms(receiveBuffer[4]);
				}
				

				sendHeader(2);
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_PROGRAM_FLASH_ISP, 0);
     8e4:	83 e1       	ldi	r24, 0x13	; 19
     8e6:	86 c0       	rjmp	.+268    	; 0x9f4 <__stack+0x595>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_READ_EEPROM_ISP:
				len = receiveBuffer[1]<<8;
     8e8:	80 91 76 01 	lds	r24, 0x0176
     8ec:	88 87       	std	Y+8, r24	; 0x08
     8ee:	1f 82       	std	Y+7, r1	; 0x07
				len|= receiveBuffer[2];
     8f0:	80 91 77 01 	lds	r24, 0x0177
     8f4:	a8 2e       	mov	r10, r24
     8f6:	bb 24       	eor	r11, r11
     8f8:	8f 81       	ldd	r24, Y+7	; 0x07
     8fa:	98 85       	ldd	r25, Y+8	; 0x08
     8fc:	a8 2a       	or	r10, r24
     8fe:	b9 2a       	or	r11, r25
				sendHeader(len+3);
     900:	c5 01       	movw	r24, r10
     902:	03 96       	adiw	r24, 0x03	; 3
     904:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_READ_EEPROM_ISP, 0);
     908:	86 e1       	ldi	r24, 0x16	; 22
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     918:	82 01       	movw	r16, r4
     91a:	71 01       	movw	r14, r2
     91c:	cc 24       	eor	r12, r12
     91e:	dd 24       	eor	r13, r13
     920:	19 c0       	rjmp	.+50     	; 0x954 <__stack+0x4f5>
				for(i=0; i<len; i++){
					byte[0] = READ_EEPROM_BYTE;
     922:	90 ea       	ldi	r25, 0xA0	; 160
     924:	99 83       	std	Y+1, r25	; 0x01
					byte[1] = (uint8_t)(address>>8);
     926:	bb 27       	eor	r27, r27
     928:	a1 2f       	mov	r26, r17
     92a:	90 2f       	mov	r25, r16
     92c:	8f 2d       	mov	r24, r15
     92e:	8a 83       	std	Y+2, r24	; 0x02
					byte[2] = (uint8_t)(address>>0);
     930:	eb 82       	std	Y+3, r14	; 0x03
					byte[3] = 0;
     932:	1c 82       	std	Y+4, r1	; 0x04
					ISP_Swap((uint8_t*) &byte);
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					UART_Tx_Checksum(byte[3], 0);
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
					address++;
     944:	08 94       	sec
     946:	e1 1c       	adc	r14, r1
     948:	f1 1c       	adc	r15, r1
     94a:	01 1d       	adc	r16, r1
     94c:	11 1d       	adc	r17, r1
				len = receiveBuffer[1]<<8;
				len|= receiveBuffer[2];
				sendHeader(len+3);
				UART_Tx_Checksum(CMD_READ_EEPROM_ISP, 0);
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				for(i=0; i<len; i++){
     94e:	08 94       	sec
     950:	c1 1c       	adc	r12, r1
     952:	d1 1c       	adc	r13, r1
     954:	ca 14       	cp	r12, r10
     956:	db 04       	cpc	r13, r11
     958:	20 f3       	brcs	.-56     	; 0x922 <__stack+0x4c3>
     95a:	36 c0       	rjmp	.+108    	; 0x9c8 <__stack+0x569>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				UART_Tx_Checksum(0,1);
				break;

			case CMD_PROGRAM_EEPROM_ISP:
				len = receiveBuffer[1]<<8;
     95c:	80 91 76 01 	lds	r24, 0x0176
     960:	8e 83       	std	Y+6, r24	; 0x06
     962:	1d 82       	std	Y+5, r1	; 0x05
				len|= receiveBuffer[2];
     964:	80 91 77 01 	lds	r24, 0x0177
     968:	a8 2e       	mov	r10, r24
     96a:	bb 24       	eor	r11, r11
     96c:	ed 81       	ldd	r30, Y+5	; 0x05
     96e:	fe 81       	ldd	r31, Y+6	; 0x06
     970:	ae 2a       	or	r10, r30
     972:	bf 2a       	or	r11, r31
				sendHeader(3);
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(CMD_PROGRAM_EEPROM_ISP, 0);
     97c:	85 e1       	ldi	r24, 0x15	; 21
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
     98c:	82 01       	movw	r16, r4
     98e:	71 01       	movw	r14, r2
     990:	cc 24       	eor	r12, r12
     992:	dd 24       	eor	r13, r13
     994:	16 c0       	rjmp	.+44     	; 0x9c2 <__stack+0x563>
				for(i=0; i<len; i++){
					byte[0] = WRITE_EEPROM_BYTE;
     996:	f0 ec       	ldi	r31, 0xC0	; 192
     998:	f9 83       	std	Y+1, r31	; 0x01
					byte[1] = (uint8_t)(address>>8);
     99a:	bb 27       	eor	r27, r27
     99c:	a1 2f       	mov	r26, r17
     99e:	90 2f       	mov	r25, r16
     9a0:	8f 2d       	mov	r24, r15
     9a2:	8a 83       	std	Y+2, r24	; 0x02
					byte[2] = (uint8_t)(address>>0);
     9a4:	eb 82       	std	Y+3, r14	; 0x03
					byte[3] = 1;//receiveBuffer[2+i];
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	2c 83       	std	Y+4, r18	; 0x04
					ISP_Swap((uint8_t*) &byte);
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	0e 94 21 05 	call	0xa42	; 0xa42 <ISP_Swap>
					address++;
     9b2:	08 94       	sec
     9b4:	e1 1c       	adc	r14, r1
     9b6:	f1 1c       	adc	r15, r1
     9b8:	01 1d       	adc	r16, r1
     9ba:	11 1d       	adc	r17, r1
				len = receiveBuffer[1]<<8;
				len|= receiveBuffer[2];
				sendHeader(3);
				UART_Tx_Checksum(CMD_PROGRAM_EEPROM_ISP, 0);
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
				for(i=0; i<len; i++){
     9bc:	08 94       	sec
     9be:	c1 1c       	adc	r12, r1
     9c0:	d1 1c       	adc	r13, r1
     9c2:	ca 14       	cp	r12, r10
     9c4:	db 04       	cpc	r13, r11
     9c6:	38 f3       	brcs	.-50     	; 0x996 <__stack+0x537>
     9c8:	c5 01       	movw	r24, r10
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	28 0e       	add	r2, r24
     9d0:	39 1e       	adc	r3, r25
     9d2:	4a 1e       	adc	r4, r26
     9d4:	5b 1e       	adc	r5, r27
     9d6:	11 c0       	rjmp	.+34     	; 0x9fa <__stack+0x59b>
				UART_Tx_Checksum(0,1);
				break;


			case CMD_LEAVE_PROGMODE_ISP: 
				sendHeader(2);
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				PORTB = reset ? clrPin(DD_RESET, PORTB) : setPin(DD_RESET, PORTB);
     9e0:	38 89       	ldd	r19, Y+16	; 0x10
     9e2:	33 23       	and	r19, r19
     9e4:	19 f0       	breq	.+6      	; 0x9ec <__stack+0x58d>
     9e6:	88 b3       	in	r24, 0x18	; 24
     9e8:	8f 7e       	andi	r24, 0xEF	; 239
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0x591>
     9ec:	88 b3       	in	r24, 0x18	; 24
     9ee:	80 61       	ori	r24, 0x10	; 16
     9f0:	88 bb       	out	0x18, r24	; 24
				UART_Tx_Checksum(CMD_LEAVE_PROGMODE_ISP, 0);
     9f2:	81 e1       	ldi	r24, 0x11	; 17
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_OK, 0);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0a c0       	rjmp	.+20     	; 0xa12 <__stack+0x5b3>
				UART_Tx_Checksum(0,1);
				break;
			default:
				sendHeader(2);
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 9a 00 	call	0x134	; 0x134 <sendHeader>
				UART_Tx_Checksum(receiveBuffer[0], 0);
     a06:	80 91 75 01 	lds	r24, 0x0175
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(STATUS_CMD_UNKNOWN, 0);
     a10:	89 ec       	ldi	r24, 0xC9	; 201
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				UART_Tx_Checksum(0,1);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	0e 94 7e 05 	call	0xafc	; 0xafc <UART_Tx_Checksum>
				

		}
		sequenceNumber++;
     a20:	80 91 69 00 	lds	r24, 0x0069
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	80 93 69 00 	sts	0x0069, r24
     a2a:	e7 cb       	rjmp	.-2098   	; 0x1fa <main+0x4c>

00000a2c <SPI_init>:
#include "spi.h"

void SPI_init(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RESET);
     a2c:	80 eb       	ldi	r24, 0xB0	; 176
     a2e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(0<<SPR0);
     a30:	82 e5       	ldi	r24, 0x52	; 82
     a32:	8d b9       	out	0x0d, r24	; 13
	SPSR = (0<<SPI2X);
     a34:	1e b8       	out	0x0e, r1	; 14
	1		1		0 		fosc/32			5
	0		1		0 		fosc/64			6
	1		1		1 		fosc/64			6
	0		1		1 		fosc/128		7
	*/
}
     a36:	08 95       	ret

00000a38 <SPI_Tx>:
uint8_t SPI_Tx(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
     a38:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a3a:	77 9b       	sbis	0x0e, 7	; 14
     a3c:	fe cf       	rjmp	.-4      	; 0xa3a <SPI_Tx+0x2>
	/* Return the data sent by the slave */
	return SPDR;
     a3e:	8f b1       	in	r24, 0x0f	; 15
}
     a40:	08 95       	ret

00000a42 <ISP_Swap>:
void ISP_Swap(uint8_t*byte){
     a42:	fc 01       	movw	r30, r24
	*(byte+0) = SPI_Tx(*(byte+0));
     a44:	80 81       	ld	r24, Z
	0		1		1 		fosc/128		7
	*/
}
uint8_t SPI_Tx(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
     a46:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a48:	77 9b       	sbis	0x0e, 7	; 14
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <ISP_Swap+0x6>
	/* Return the data sent by the slave */
	return SPDR;
     a4c:	8f b1       	in	r24, 0x0f	; 15
}
void ISP_Swap(uint8_t*byte){
	*(byte+0) = SPI_Tx(*(byte+0));
     a4e:	80 83       	st	Z, r24
	//_delay_ms(byteDelay);
	*(byte+1) = SPI_Tx(*(byte+1));
     a50:	81 81       	ldd	r24, Z+1	; 0x01
	0		1		1 		fosc/128		7
	*/
}
uint8_t SPI_Tx(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
     a52:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a54:	77 9b       	sbis	0x0e, 7	; 14
     a56:	fe cf       	rjmp	.-4      	; 0xa54 <ISP_Swap+0x12>
	/* Return the data sent by the slave */
	return SPDR;
     a58:	8f b1       	in	r24, 0x0f	; 15
}
void ISP_Swap(uint8_t*byte){
	*(byte+0) = SPI_Tx(*(byte+0));
	//_delay_ms(byteDelay);
	*(byte+1) = SPI_Tx(*(byte+1));
     a5a:	81 83       	std	Z+1, r24	; 0x01
	//_delay_ms(byteDelay);
	*(byte+2) = SPI_Tx(*(byte+2));
     a5c:	82 81       	ldd	r24, Z+2	; 0x02
	0		1		1 		fosc/128		7
	*/
}
uint8_t SPI_Tx(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
     a5e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a60:	77 9b       	sbis	0x0e, 7	; 14
     a62:	fe cf       	rjmp	.-4      	; 0xa60 <ISP_Swap+0x1e>
	/* Return the data sent by the slave */
	return SPDR;
     a64:	8f b1       	in	r24, 0x0f	; 15
void ISP_Swap(uint8_t*byte){
	*(byte+0) = SPI_Tx(*(byte+0));
	//_delay_ms(byteDelay);
	*(byte+1) = SPI_Tx(*(byte+1));
	//_delay_ms(byteDelay);
	*(byte+2) = SPI_Tx(*(byte+2));
     a66:	82 83       	std	Z+2, r24	; 0x02
	//_delay_ms(byteDelay);
	*(byte+3) = SPI_Tx(*(byte+3));
     a68:	83 81       	ldd	r24, Z+3	; 0x03
	0		1		1 		fosc/128		7
	*/
}
uint8_t SPI_Tx(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
     a6a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     a6c:	77 9b       	sbis	0x0e, 7	; 14
     a6e:	fe cf       	rjmp	.-4      	; 0xa6c <ISP_Swap+0x2a>
	/* Return the data sent by the slave */
	return SPDR;
     a70:	8f b1       	in	r24, 0x0f	; 15
	//_delay_ms(byteDelay);
	*(byte+1) = SPI_Tx(*(byte+1));
	//_delay_ms(byteDelay);
	*(byte+2) = SPI_Tx(*(byte+2));
	//_delay_ms(byteDelay);
	*(byte+3) = SPI_Tx(*(byte+3));
     a72:	83 83       	std	Z+3, r24	; 0x03
	//_delay_ms(byteDelay);
}
     a74:	08 95       	ret

00000a76 <SPI_clock>:
void SPI_clock(uint8_t speed){
	SPSR = (speed % 2)<<SPI2X;
     a76:	81 70       	andi	r24, 0x01	; 1
     a78:	8e b9       	out	0x0e, r24	; 14

}
     a7a:	08 95       	ret

00000a7c <UART_init>:
*
*****************************************************************************/
void UART_init(void){
   //#define BAUD 9600
   #include <util/setbaud.h>
   UBRRHI = UBRRH_VALUE;
     a7c:	10 bc       	out	0x20, r1	; 32
   UBRR = UBRRL_VALUE;
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	89 b9       	out	0x09, r24	; 9
   #if USE_2X
   UCSRA |= (1 << U2X);
   #else
   UCSRA &= ~(1 << U2X);
     a82:	59 98       	cbi	0x0b, 1	; 11
   #endif
   //Enable Receiving, transmitting and enable receive interupt.
   UCSRB = (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
     a84:	88 e1       	ldi	r24, 0x18	; 24
     a86:	8a b9       	out	0x0a, r24	; 10
   // Async. mode, 8N1
   //UCSRC = (0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)|(0<<UCPOL);
}
     a88:	08 95       	ret

00000a8a <UART_Tx>:
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     a8a:	5d 9b       	sbis	0x0b, 5	; 11
     a8c:	fe cf       	rjmp	.-4      	; 0xa8a <UART_Tx>
    UDR = data;
     a8e:	8c b9       	out	0x0c, r24	; 12
}
     a90:	08 95       	ret

00000a92 <UART_Rx>:
*   Purpose :       Receives one byte from the UART
*
*****************************************************************************/
uint8_t UART_Rx(void)
{
    while (!(UCSRA & (1<<RXC)));
     a92:	5f 9b       	sbis	0x0b, 7	; 11
     a94:	fe cf       	rjmp	.-4      	; 0xa92 <UART_Rx>
    return UDR;
     a96:	8c b1       	in	r24, 0x0c	; 12
}
     a98:	08 95       	ret

00000a9a <UART_Tx_ASCII>:
*   Parameters :    uint8_t data: data to send
*
*   Purpose :       Sends a number through the USART according to ASCII
*
*****************************************************************************/
void UART_Tx_ASCII(uint8_t data){
     a9a:	38 2f       	mov	r19, r24
	uint8_t output[3] = {0,0,0};
 
	output[2] = data%10;
	data = data/10;
     a9c:	6a e0       	ldi	r22, 0x0A	; 10
     a9e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodqi4>
     aa2:	28 2f       	mov	r18, r24
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     aa4:	5d 9b       	sbis	0x0b, 5	; 11
     aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <UART_Tx_ASCII+0xa>
	data = data/10;
	output[1] = data%10;
	data = data/10;
	output[0] = data%10;
 
	UART_Tx(output[0]+48);
     aa8:	82 2f       	mov	r24, r18
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodqi4>
     ab0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodqi4>
     ab4:	90 5d       	subi	r25, 0xD0	; 208
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
    UDR = data;
     ab6:	9c b9       	out	0x0c, r25	; 12
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     ab8:	5d 9b       	sbis	0x0b, 5	; 11
     aba:	fe cf       	rjmp	.-4      	; 0xab8 <UART_Tx_ASCII+0x1e>
	output[1] = data%10;
	data = data/10;
	output[0] = data%10;
 
	UART_Tx(output[0]+48);
	UART_Tx(output[1]+48);
     abc:	82 2f       	mov	r24, r18
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodqi4>
     ac4:	90 5d       	subi	r25, 0xD0	; 208
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
    UDR = data;
     ac6:	9c b9       	out	0x0c, r25	; 12
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     ac8:	5d 9b       	sbis	0x0b, 5	; 11
     aca:	fe cf       	rjmp	.-4      	; 0xac8 <UART_Tx_ASCII+0x2e>
	data = data/10;
	output[0] = data%10;
 
	UART_Tx(output[0]+48);
	UART_Tx(output[1]+48);
	UART_Tx(output[2]+48);
     acc:	83 2f       	mov	r24, r19
     ace:	6a e0       	ldi	r22, 0x0A	; 10
     ad0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodqi4>
     ad4:	90 5d       	subi	r25, 0xD0	; 208
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
    UDR = data;
     ad6:	9c b9       	out	0x0c, r25	; 12
	UART_Tx(output[0]+48);
	UART_Tx(output[1]+48);
	UART_Tx(output[2]+48);
 
 
}
     ad8:	08 95       	ret

00000ada <UART_Tx_String>:
*					uint8_t length: length of data
*
*   Purpose :       Sends a string through the UART
*
*****************************************************************************/
void UART_Tx_String(uint8_t *data, uint8_t length){
     ada:	40 91 74 01 	lds	r20, 0x0174
     ade:	fc 01       	movw	r30, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <UART_Tx_String+0x18>
	uint8_t i=0; 
	for(i=0; i<length; i++){
		UART_Tx_Checksum(data[i], 0);
     ae4:	80 81       	ld	r24, Z
	static uint8_t checksum = 0;
	if(send != 0){
		UART_Tx(checksum);
		checksum = 0;
	}else{
		checksum^=byte;
     ae6:	48 27       	eor	r20, r24
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     ae8:	5d 9b       	sbis	0x0b, 5	; 11
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <UART_Tx_String+0xe>
    UDR = data;
     aec:	8c b9       	out	0x0c, r24	; 12
*   Purpose :       Sends a string through the UART
*
*****************************************************************************/
void UART_Tx_String(uint8_t *data, uint8_t length){
	uint8_t i=0; 
	for(i=0; i<length; i++){
     aee:	9f 5f       	subi	r25, 0xFF	; 255
     af0:	31 96       	adiw	r30, 0x01	; 1
     af2:	96 17       	cp	r25, r22
     af4:	b8 f3       	brcs	.-18     	; 0xae4 <UART_Tx_String+0xa>
     af6:	40 93 74 01 	sts	0x0174, r20
		UART_Tx_Checksum(data[i], 0);
	}
 
}
     afa:	08 95       	ret

00000afc <UART_Tx_Checksum>:
*
*****************************************************************************/



uint8_t UART_Tx_Checksum(uint8_t byte, uint8_t send){
     afc:	90 91 74 01 	lds	r25, 0x0174
	static uint8_t checksum = 0;
	if(send != 0){
     b00:	66 23       	and	r22, r22
     b02:	31 f0       	breq	.+12     	; 0xb10 <UART_Tx_Checksum+0x14>
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     b04:	5d 9b       	sbis	0x0b, 5	; 11
     b06:	fe cf       	rjmp	.-4      	; 0xb04 <UART_Tx_Checksum+0x8>
    UDR = data;
     b08:	9c b9       	out	0x0c, r25	; 12

uint8_t UART_Tx_Checksum(uint8_t byte, uint8_t send){
	static uint8_t checksum = 0;
	if(send != 0){
		UART_Tx(checksum);
		checksum = 0;
     b0a:	10 92 74 01 	sts	0x0174, r1
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <UART_Tx_Checksum+0x20>
	}else{
		checksum^=byte;
     b10:	98 27       	eor	r25, r24
     b12:	90 93 74 01 	sts	0x0174, r25
*   Purpose :       Send one byte through the UART
*
*****************************************************************************/
void UART_Tx(uint8_t data)
{
    while (!(UCSRA & (1<<UDRE)));
     b16:	5d 9b       	sbis	0x0b, 5	; 11
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <UART_Tx_Checksum+0x1a>
    UDR = data;
     b1a:	8c b9       	out	0x0c, r24	; 12
	}else{
		checksum^=byte;
		UART_Tx(byte);
	}
	return checksum;
}
     b1c:	80 91 74 01 	lds	r24, 0x0174
     b20:	08 95       	ret

00000b22 <UART_Rx_Checksum>:


uint8_t UART_Rx_Checksum(uint8_t send){
	static uint8_t checksum = 0;
	uint8_t data;
	if(send == 0){
     b22:	88 23       	and	r24, r24
     b24:	49 f4       	brne	.+18     	; 0xb38 <UART_Rx_Checksum+0x16>
*   Purpose :       Receives one byte from the UART
*
*****************************************************************************/
uint8_t UART_Rx(void)
{
    while (!(UCSRA & (1<<RXC)));
     b26:	5f 9b       	sbis	0x0b, 7	; 11
     b28:	fe cf       	rjmp	.-4      	; 0xb26 <UART_Rx_Checksum+0x4>
    return UDR;
     b2a:	9c b1       	in	r25, 0x0c	; 12
uint8_t UART_Rx_Checksum(uint8_t send){
	static uint8_t checksum = 0;
	uint8_t data;
	if(send == 0){
		data = UART_Rx();
		checksum ^= data;
     b2c:	80 91 73 01 	lds	r24, 0x0173
     b30:	89 27       	eor	r24, r25
     b32:	80 93 73 01 	sts	0x0173, r24
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <UART_Rx_Checksum+0x1e>
	}else{
		data = checksum;
     b38:	90 91 73 01 	lds	r25, 0x0173
		checksum = 0;
     b3c:	10 92 73 01 	sts	0x0173, r1
	}
	return data;
}
     b40:	89 2f       	mov	r24, r25
     b42:	08 95       	ret

00000b44 <__fixunssfsi>:
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	7b 01       	movw	r14, r22
     b4e:	8c 01       	movw	r16, r24
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	5f e4       	ldi	r21, 0x4F	; 79
     b58:	0e 94 4e 09 	call	0x129c	; 0x129c <__gesf2>
     b5c:	88 23       	and	r24, r24
     b5e:	8c f0       	brlt	.+34     	; 0xb82 <__fixunssfsi+0x3e>
     b60:	c8 01       	movw	r24, r16
     b62:	b7 01       	movw	r22, r14
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	5f e4       	ldi	r21, 0x4F	; 79
     b6c:	0e 94 1a 07 	call	0xe34	; 0xe34 <__subsf3>
     b70:	0e 94 ae 09 	call	0x135c	; 0x135c <__fixsfsi>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	20 50       	subi	r18, 0x00	; 0
     b7a:	30 40       	sbci	r19, 0x00	; 0
     b7c:	40 40       	sbci	r20, 0x00	; 0
     b7e:	50 48       	sbci	r21, 0x80	; 128
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <__fixunssfsi+0x4a>
     b82:	c8 01       	movw	r24, r16
     b84:	b7 01       	movw	r22, r14
     b86:	0e 94 ae 09 	call	0x135c	; 0x135c <__fixsfsi>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	b9 01       	movw	r22, r18
     b90:	ca 01       	movw	r24, r20
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <_fpadd_parts>:
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e4 ed       	ldi	r30, 0xD4	; 212
     ba2:	f5 e0       	ldi	r31, 0x05	; 5
     ba4:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__prologue_saves__>
     ba8:	dc 01       	movw	r26, r24
     baa:	2b 01       	movw	r4, r22
     bac:	fa 01       	movw	r30, r20
     bae:	9c 91       	ld	r25, X
     bb0:	92 30       	cpi	r25, 0x02	; 2
     bb2:	08 f4       	brcc	.+2      	; 0xbb6 <_fpadd_parts+0x1a>
     bb4:	39 c1       	rjmp	.+626    	; 0xe28 <_fpadd_parts+0x28c>
     bb6:	eb 01       	movw	r28, r22
     bb8:	88 81       	ld	r24, Y
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <_fpadd_parts+0x24>
     bbe:	33 c1       	rjmp	.+614    	; 0xe26 <_fpadd_parts+0x28a>
     bc0:	94 30       	cpi	r25, 0x04	; 4
     bc2:	69 f4       	brne	.+26     	; 0xbde <_fpadd_parts+0x42>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f0       	breq	.+2      	; 0xbca <_fpadd_parts+0x2e>
     bc8:	2f c1       	rjmp	.+606    	; 0xe28 <_fpadd_parts+0x28c>
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	9c 91       	ld	r25, X
     bce:	11 97       	sbiw	r26, 0x01	; 1
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	98 17       	cp	r25, r24
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <_fpadd_parts+0x3c>
     bd6:	28 c1       	rjmp	.+592    	; 0xe28 <_fpadd_parts+0x28c>
     bd8:	aa e6       	ldi	r26, 0x6A	; 106
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	25 c1       	rjmp	.+586    	; 0xe28 <_fpadd_parts+0x28c>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	09 f4       	brne	.+2      	; 0xbe4 <_fpadd_parts+0x48>
     be2:	21 c1       	rjmp	.+578    	; 0xe26 <_fpadd_parts+0x28a>
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	a9 f4       	brne	.+42     	; 0xc12 <_fpadd_parts+0x76>
     be8:	92 30       	cpi	r25, 0x02	; 2
     bea:	09 f0       	breq	.+2      	; 0xbee <_fpadd_parts+0x52>
     bec:	1d c1       	rjmp	.+570    	; 0xe28 <_fpadd_parts+0x28c>
     bee:	9a 01       	movw	r18, r20
     bf0:	ad 01       	movw	r20, r26
     bf2:	88 e0       	ldi	r24, 0x08	; 8
     bf4:	ea 01       	movw	r28, r20
     bf6:	09 90       	ld	r0, Y+
     bf8:	ae 01       	movw	r20, r28
     bfa:	e9 01       	movw	r28, r18
     bfc:	09 92       	st	Y+, r0
     bfe:	9e 01       	movw	r18, r28
     c00:	81 50       	subi	r24, 0x01	; 1
     c02:	c1 f7       	brne	.-16     	; 0xbf4 <_fpadd_parts+0x58>
     c04:	e2 01       	movw	r28, r4
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	9c 91       	ld	r25, X
     c0c:	89 23       	and	r24, r25
     c0e:	81 83       	std	Z+1, r24	; 0x01
     c10:	08 c1       	rjmp	.+528    	; 0xe22 <_fpadd_parts+0x286>
     c12:	92 30       	cpi	r25, 0x02	; 2
     c14:	09 f4       	brne	.+2      	; 0xc18 <_fpadd_parts+0x7c>
     c16:	07 c1       	rjmp	.+526    	; 0xe26 <_fpadd_parts+0x28a>
     c18:	12 96       	adiw	r26, 0x02	; 2
     c1a:	2d 90       	ld	r2, X+
     c1c:	3c 90       	ld	r3, X
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	eb 01       	movw	r28, r22
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	9b 81       	ldd	r25, Y+3	; 0x03
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	ad 90       	ld	r10, X+
     c2a:	bd 90       	ld	r11, X+
     c2c:	cd 90       	ld	r12, X+
     c2e:	dc 90       	ld	r13, X
     c30:	17 97       	sbiw	r26, 0x07	; 7
     c32:	ec 80       	ldd	r14, Y+4	; 0x04
     c34:	fd 80       	ldd	r15, Y+5	; 0x05
     c36:	0e 81       	ldd	r16, Y+6	; 0x06
     c38:	1f 81       	ldd	r17, Y+7	; 0x07
     c3a:	91 01       	movw	r18, r2
     c3c:	28 1b       	sub	r18, r24
     c3e:	39 0b       	sbc	r19, r25
     c40:	b9 01       	movw	r22, r18
     c42:	37 ff       	sbrs	r19, 7
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <_fpadd_parts+0xb2>
     c46:	66 27       	eor	r22, r22
     c48:	77 27       	eor	r23, r23
     c4a:	62 1b       	sub	r22, r18
     c4c:	73 0b       	sbc	r23, r19
     c4e:	60 32       	cpi	r22, 0x20	; 32
     c50:	71 05       	cpc	r23, r1
     c52:	0c f0       	brlt	.+2      	; 0xc56 <_fpadd_parts+0xba>
     c54:	61 c0       	rjmp	.+194    	; 0xd18 <_fpadd_parts+0x17c>
     c56:	12 16       	cp	r1, r18
     c58:	13 06       	cpc	r1, r19
     c5a:	6c f5       	brge	.+90     	; 0xcb6 <_fpadd_parts+0x11a>
     c5c:	37 01       	movw	r6, r14
     c5e:	48 01       	movw	r8, r16
     c60:	06 2e       	mov	r0, r22
     c62:	04 c0       	rjmp	.+8      	; 0xc6c <_fpadd_parts+0xd0>
     c64:	96 94       	lsr	r9
     c66:	87 94       	ror	r8
     c68:	77 94       	ror	r7
     c6a:	67 94       	ror	r6
     c6c:	0a 94       	dec	r0
     c6e:	d2 f7       	brpl	.-12     	; 0xc64 <_fpadd_parts+0xc8>
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <_fpadd_parts+0xe6>
     c7a:	22 0f       	add	r18, r18
     c7c:	33 1f       	adc	r19, r19
     c7e:	44 1f       	adc	r20, r20
     c80:	55 1f       	adc	r21, r21
     c82:	6a 95       	dec	r22
     c84:	d2 f7       	brpl	.-12     	; 0xc7a <_fpadd_parts+0xde>
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	30 40       	sbci	r19, 0x00	; 0
     c8a:	40 40       	sbci	r20, 0x00	; 0
     c8c:	50 40       	sbci	r21, 0x00	; 0
     c8e:	2e 21       	and	r18, r14
     c90:	3f 21       	and	r19, r15
     c92:	40 23       	and	r20, r16
     c94:	51 23       	and	r21, r17
     c96:	21 15       	cp	r18, r1
     c98:	31 05       	cpc	r19, r1
     c9a:	41 05       	cpc	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	21 f0       	breq	.+8      	; 0xca8 <_fpadd_parts+0x10c>
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	79 01       	movw	r14, r18
     caa:	8a 01       	movw	r16, r20
     cac:	e6 28       	or	r14, r6
     cae:	f7 28       	or	r15, r7
     cb0:	08 29       	or	r16, r8
     cb2:	19 29       	or	r17, r9
     cb4:	3c c0       	rjmp	.+120    	; 0xd2e <_fpadd_parts+0x192>
     cb6:	23 2b       	or	r18, r19
     cb8:	d1 f1       	breq	.+116    	; 0xd2e <_fpadd_parts+0x192>
     cba:	26 0e       	add	r2, r22
     cbc:	37 1e       	adc	r3, r23
     cbe:	35 01       	movw	r6, r10
     cc0:	46 01       	movw	r8, r12
     cc2:	06 2e       	mov	r0, r22
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <_fpadd_parts+0x132>
     cc6:	96 94       	lsr	r9
     cc8:	87 94       	ror	r8
     cca:	77 94       	ror	r7
     ccc:	67 94       	ror	r6
     cce:	0a 94       	dec	r0
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <_fpadd_parts+0x12a>
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <_fpadd_parts+0x148>
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <_fpadd_parts+0x140>
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	30 40       	sbci	r19, 0x00	; 0
     cec:	40 40       	sbci	r20, 0x00	; 0
     cee:	50 40       	sbci	r21, 0x00	; 0
     cf0:	2a 21       	and	r18, r10
     cf2:	3b 21       	and	r19, r11
     cf4:	4c 21       	and	r20, r12
     cf6:	5d 21       	and	r21, r13
     cf8:	21 15       	cp	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	41 05       	cpc	r20, r1
     cfe:	51 05       	cpc	r21, r1
     d00:	21 f0       	breq	.+8      	; 0xd0a <_fpadd_parts+0x16e>
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	59 01       	movw	r10, r18
     d0c:	6a 01       	movw	r12, r20
     d0e:	a6 28       	or	r10, r6
     d10:	b7 28       	or	r11, r7
     d12:	c8 28       	or	r12, r8
     d14:	d9 28       	or	r13, r9
     d16:	0b c0       	rjmp	.+22     	; 0xd2e <_fpadd_parts+0x192>
     d18:	82 15       	cp	r24, r2
     d1a:	93 05       	cpc	r25, r3
     d1c:	2c f0       	brlt	.+10     	; 0xd28 <_fpadd_parts+0x18c>
     d1e:	1c 01       	movw	r2, r24
     d20:	aa 24       	eor	r10, r10
     d22:	bb 24       	eor	r11, r11
     d24:	65 01       	movw	r12, r10
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <_fpadd_parts+0x192>
     d28:	ee 24       	eor	r14, r14
     d2a:	ff 24       	eor	r15, r15
     d2c:	87 01       	movw	r16, r14
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	9c 91       	ld	r25, X
     d32:	d2 01       	movw	r26, r4
     d34:	11 96       	adiw	r26, 0x01	; 1
     d36:	8c 91       	ld	r24, X
     d38:	98 17       	cp	r25, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <_fpadd_parts+0x1a2>
     d3c:	45 c0       	rjmp	.+138    	; 0xdc8 <_fpadd_parts+0x22c>
     d3e:	99 23       	and	r25, r25
     d40:	39 f0       	breq	.+14     	; 0xd50 <_fpadd_parts+0x1b4>
     d42:	a8 01       	movw	r20, r16
     d44:	97 01       	movw	r18, r14
     d46:	2a 19       	sub	r18, r10
     d48:	3b 09       	sbc	r19, r11
     d4a:	4c 09       	sbc	r20, r12
     d4c:	5d 09       	sbc	r21, r13
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <_fpadd_parts+0x1c0>
     d50:	a6 01       	movw	r20, r12
     d52:	95 01       	movw	r18, r10
     d54:	2e 19       	sub	r18, r14
     d56:	3f 09       	sbc	r19, r15
     d58:	40 0b       	sbc	r20, r16
     d5a:	51 0b       	sbc	r21, r17
     d5c:	57 fd       	sbrc	r21, 7
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <_fpadd_parts+0x1d4>
     d60:	11 82       	std	Z+1, r1	; 0x01
     d62:	33 82       	std	Z+3, r3	; 0x03
     d64:	22 82       	std	Z+2, r2	; 0x02
     d66:	24 83       	std	Z+4, r18	; 0x04
     d68:	35 83       	std	Z+5, r19	; 0x05
     d6a:	46 83       	std	Z+6, r20	; 0x06
     d6c:	57 83       	std	Z+7, r21	; 0x07
     d6e:	1d c0       	rjmp	.+58     	; 0xdaa <_fpadd_parts+0x20e>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	81 83       	std	Z+1, r24	; 0x01
     d74:	33 82       	std	Z+3, r3	; 0x03
     d76:	22 82       	std	Z+2, r2	; 0x02
     d78:	88 27       	eor	r24, r24
     d7a:	99 27       	eor	r25, r25
     d7c:	dc 01       	movw	r26, r24
     d7e:	82 1b       	sub	r24, r18
     d80:	93 0b       	sbc	r25, r19
     d82:	a4 0b       	sbc	r26, r20
     d84:	b5 0b       	sbc	r27, r21
     d86:	84 83       	std	Z+4, r24	; 0x04
     d88:	95 83       	std	Z+5, r25	; 0x05
     d8a:	a6 83       	std	Z+6, r26	; 0x06
     d8c:	b7 83       	std	Z+7, r27	; 0x07
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <_fpadd_parts+0x20e>
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	55 1f       	adc	r21, r21
     d98:	24 83       	std	Z+4, r18	; 0x04
     d9a:	35 83       	std	Z+5, r19	; 0x05
     d9c:	46 83       	std	Z+6, r20	; 0x06
     d9e:	57 83       	std	Z+7, r21	; 0x07
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	93 83       	std	Z+3, r25	; 0x03
     da8:	82 83       	std	Z+2, r24	; 0x02
     daa:	24 81       	ldd	r18, Z+4	; 0x04
     dac:	35 81       	ldd	r19, Z+5	; 0x05
     dae:	46 81       	ldd	r20, Z+6	; 0x06
     db0:	57 81       	ldd	r21, Z+7	; 0x07
     db2:	da 01       	movw	r26, r20
     db4:	c9 01       	movw	r24, r18
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	a1 09       	sbc	r26, r1
     dba:	b1 09       	sbc	r27, r1
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	af 4f       	sbci	r26, 0xFF	; 255
     dc2:	bf 43       	sbci	r27, 0x3F	; 63
     dc4:	28 f3       	brcs	.-54     	; 0xd90 <_fpadd_parts+0x1f4>
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <_fpadd_parts+0x242>
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	33 82       	std	Z+3, r3	; 0x03
     dcc:	22 82       	std	Z+2, r2	; 0x02
     dce:	ea 0c       	add	r14, r10
     dd0:	fb 1c       	adc	r15, r11
     dd2:	0c 1d       	adc	r16, r12
     dd4:	1d 1d       	adc	r17, r13
     dd6:	e4 82       	std	Z+4, r14	; 0x04
     dd8:	f5 82       	std	Z+5, r15	; 0x05
     dda:	06 83       	std	Z+6, r16	; 0x06
     ddc:	17 83       	std	Z+7, r17	; 0x07
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	80 83       	st	Z, r24
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	57 ff       	sbrs	r21, 7
     dec:	1a c0       	rjmp	.+52     	; 0xe22 <_fpadd_parts+0x286>
     dee:	c9 01       	movw	r24, r18
     df0:	aa 27       	eor	r26, r26
     df2:	97 fd       	sbrc	r25, 7
     df4:	a0 95       	com	r26
     df6:	ba 2f       	mov	r27, r26
     df8:	81 70       	andi	r24, 0x01	; 1
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	a0 70       	andi	r26, 0x00	; 0
     dfe:	b0 70       	andi	r27, 0x00	; 0
     e00:	56 95       	lsr	r21
     e02:	47 95       	ror	r20
     e04:	37 95       	ror	r19
     e06:	27 95       	ror	r18
     e08:	82 2b       	or	r24, r18
     e0a:	93 2b       	or	r25, r19
     e0c:	a4 2b       	or	r26, r20
     e0e:	b5 2b       	or	r27, r21
     e10:	84 83       	std	Z+4, r24	; 0x04
     e12:	95 83       	std	Z+5, r25	; 0x05
     e14:	a6 83       	std	Z+6, r26	; 0x06
     e16:	b7 83       	std	Z+7, r27	; 0x07
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	93 83       	std	Z+3, r25	; 0x03
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	df 01       	movw	r26, r30
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <_fpadd_parts+0x28c>
     e26:	d2 01       	movw	r26, r4
     e28:	cd 01       	movw	r24, r26
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	e2 e1       	ldi	r30, 0x12	; 18
     e30:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__epilogue_restores__>

00000e34 <__subsf3>:
     e34:	a0 e2       	ldi	r26, 0x20	; 32
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e0 e2       	ldi	r30, 0x20	; 32
     e3a:	f7 e0       	ldi	r31, 0x07	; 7
     e3c:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__+0x18>
     e40:	69 83       	std	Y+1, r22	; 0x01
     e42:	7a 83       	std	Y+2, r23	; 0x02
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	2d 83       	std	Y+5, r18	; 0x05
     e4a:	3e 83       	std	Y+6, r19	; 0x06
     e4c:	4f 83       	std	Y+7, r20	; 0x07
     e4e:	58 87       	std	Y+8, r21	; 0x08
     e50:	e9 e0       	ldi	r30, 0x09	; 9
     e52:	ee 2e       	mov	r14, r30
     e54:	f1 2c       	mov	r15, r1
     e56:	ec 0e       	add	r14, r28
     e58:	fd 1e       	adc	r15, r29
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	b7 01       	movw	r22, r14
     e60:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     e64:	8e 01       	movw	r16, r28
     e66:	0f 5e       	subi	r16, 0xEF	; 239
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	ce 01       	movw	r24, r28
     e6c:	05 96       	adiw	r24, 0x05	; 5
     e6e:	b8 01       	movw	r22, r16
     e70:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     e74:	8a 89       	ldd	r24, Y+18	; 0x12
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	89 27       	eor	r24, r25
     e7a:	8a 8b       	std	Y+18, r24	; 0x12
     e7c:	c7 01       	movw	r24, r14
     e7e:	b8 01       	movw	r22, r16
     e80:	ae 01       	movw	r20, r28
     e82:	47 5e       	subi	r20, 0xE7	; 231
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_fpadd_parts>
     e8a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__pack_f>
     e8e:	a0 96       	adiw	r28, 0x20	; 32
     e90:	e6 e0       	ldi	r30, 0x06	; 6
     e92:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__+0x18>

00000e96 <__addsf3>:
     e96:	a0 e2       	ldi	r26, 0x20	; 32
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e5       	ldi	r30, 0x51	; 81
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__+0x18>
     ea2:	69 83       	std	Y+1, r22	; 0x01
     ea4:	7a 83       	std	Y+2, r23	; 0x02
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	2d 83       	std	Y+5, r18	; 0x05
     eac:	3e 83       	std	Y+6, r19	; 0x06
     eae:	4f 83       	std	Y+7, r20	; 0x07
     eb0:	58 87       	std	Y+8, r21	; 0x08
     eb2:	f9 e0       	ldi	r31, 0x09	; 9
     eb4:	ef 2e       	mov	r14, r31
     eb6:	f1 2c       	mov	r15, r1
     eb8:	ec 0e       	add	r14, r28
     eba:	fd 1e       	adc	r15, r29
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	b7 01       	movw	r22, r14
     ec2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     ec6:	8e 01       	movw	r16, r28
     ec8:	0f 5e       	subi	r16, 0xEF	; 239
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	ce 01       	movw	r24, r28
     ece:	05 96       	adiw	r24, 0x05	; 5
     ed0:	b8 01       	movw	r22, r16
     ed2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     ed6:	c7 01       	movw	r24, r14
     ed8:	b8 01       	movw	r22, r16
     eda:	ae 01       	movw	r20, r28
     edc:	47 5e       	subi	r20, 0xE7	; 231
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_fpadd_parts>
     ee4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__pack_f>
     ee8:	a0 96       	adiw	r28, 0x20	; 32
     eea:	e6 e0       	ldi	r30, 0x06	; 6
     eec:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__+0x18>

00000ef0 <__mulsf3>:
     ef0:	a0 e2       	ldi	r26, 0x20	; 32
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e7       	ldi	r30, 0x7E	; 126
     ef6:	f7 e0       	ldi	r31, 0x07	; 7
     ef8:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__prologue_saves__>
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	3e 83       	std	Y+6, r19	; 0x06
     f08:	4f 83       	std	Y+7, r20	; 0x07
     f0a:	58 87       	std	Y+8, r21	; 0x08
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	be 01       	movw	r22, r28
     f12:	67 5f       	subi	r22, 0xF7	; 247
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     f1a:	ce 01       	movw	r24, r28
     f1c:	05 96       	adiw	r24, 0x05	; 5
     f1e:	be 01       	movw	r22, r28
     f20:	6f 5e       	subi	r22, 0xEF	; 239
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
     f28:	99 85       	ldd	r25, Y+9	; 0x09
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	88 f0       	brcs	.+34     	; 0xf50 <__mulsf3+0x60>
     f2e:	89 89       	ldd	r24, Y+17	; 0x11
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	c8 f0       	brcs	.+50     	; 0xf66 <__mulsf3+0x76>
     f34:	94 30       	cpi	r25, 0x04	; 4
     f36:	19 f4       	brne	.+6      	; 0xf3e <__mulsf3+0x4e>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	51 f4       	brne	.+20     	; 0xf50 <__mulsf3+0x60>
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__mulsf3+0x56>
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	29 f4       	brne	.+10     	; 0xf4c <__mulsf3+0x5c>
     f42:	92 30       	cpi	r25, 0x02	; 2
     f44:	81 f4       	brne	.+32     	; 0xf66 <__mulsf3+0x76>
     f46:	8a e6       	ldi	r24, 0x6A	; 106
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	c6 c0       	rjmp	.+396    	; 0x10d8 <__mulsf3+0x1e8>
     f4c:	92 30       	cpi	r25, 0x02	; 2
     f4e:	49 f4       	brne	.+18     	; 0xf62 <__mulsf3+0x72>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	8a 89       	ldd	r24, Y+18	; 0x12
     f56:	98 13       	cpse	r25, r24
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	2a 87       	std	Y+10, r18	; 0x0a
     f5c:	ce 01       	movw	r24, r28
     f5e:	09 96       	adiw	r24, 0x09	; 9
     f60:	bb c0       	rjmp	.+374    	; 0x10d8 <__mulsf3+0x1e8>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	49 f4       	brne	.+18     	; 0xf78 <__mulsf3+0x88>
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6a:	8a 89       	ldd	r24, Y+18	; 0x12
     f6c:	98 13       	cpse	r25, r24
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	2a 8b       	std	Y+18, r18	; 0x12
     f72:	ce 01       	movw	r24, r28
     f74:	41 96       	adiw	r24, 0x11	; 17
     f76:	b0 c0       	rjmp	.+352    	; 0x10d8 <__mulsf3+0x1e8>
     f78:	2d 84       	ldd	r2, Y+13	; 0x0d
     f7a:	3e 84       	ldd	r3, Y+14	; 0x0e
     f7c:	4f 84       	ldd	r4, Y+15	; 0x0f
     f7e:	58 88       	ldd	r5, Y+16	; 0x10
     f80:	6d 88       	ldd	r6, Y+21	; 0x15
     f82:	7e 88       	ldd	r7, Y+22	; 0x16
     f84:	8f 88       	ldd	r8, Y+23	; 0x17
     f86:	98 8c       	ldd	r9, Y+24	; 0x18
     f88:	ee 24       	eor	r14, r14
     f8a:	ff 24       	eor	r15, r15
     f8c:	87 01       	movw	r16, r14
     f8e:	aa 24       	eor	r10, r10
     f90:	bb 24       	eor	r11, r11
     f92:	65 01       	movw	r12, r10
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	c1 01       	movw	r24, r2
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	89 2b       	or	r24, r25
     fa8:	e9 f0       	breq	.+58     	; 0xfe4 <__mulsf3+0xf4>
     faa:	e6 0c       	add	r14, r6
     fac:	f7 1c       	adc	r15, r7
     fae:	08 1d       	adc	r16, r8
     fb0:	19 1d       	adc	r17, r9
     fb2:	9a 01       	movw	r18, r20
     fb4:	ab 01       	movw	r20, r22
     fb6:	2a 0d       	add	r18, r10
     fb8:	3b 1d       	adc	r19, r11
     fba:	4c 1d       	adc	r20, r12
     fbc:	5d 1d       	adc	r21, r13
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e6 14       	cp	r14, r6
     fc8:	f7 04       	cpc	r15, r7
     fca:	08 05       	cpc	r16, r8
     fcc:	19 05       	cpc	r17, r9
     fce:	20 f4       	brcc	.+8      	; 0xfd8 <__mulsf3+0xe8>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ba 01       	movw	r22, r20
     fda:	a9 01       	movw	r20, r18
     fdc:	48 0f       	add	r20, r24
     fde:	59 1f       	adc	r21, r25
     fe0:	6a 1f       	adc	r22, r26
     fe2:	7b 1f       	adc	r23, r27
     fe4:	aa 0c       	add	r10, r10
     fe6:	bb 1c       	adc	r11, r11
     fe8:	cc 1c       	adc	r12, r12
     fea:	dd 1c       	adc	r13, r13
     fec:	97 fe       	sbrs	r9, 7
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <__mulsf3+0x110>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	a8 2a       	or	r10, r24
     ffa:	b9 2a       	or	r11, r25
     ffc:	ca 2a       	or	r12, r26
     ffe:	db 2a       	or	r13, r27
    1000:	31 96       	adiw	r30, 0x01	; 1
    1002:	e0 32       	cpi	r30, 0x20	; 32
    1004:	f1 05       	cpc	r31, r1
    1006:	49 f0       	breq	.+18     	; 0x101a <__mulsf3+0x12a>
    1008:	66 0c       	add	r6, r6
    100a:	77 1c       	adc	r7, r7
    100c:	88 1c       	adc	r8, r8
    100e:	99 1c       	adc	r9, r9
    1010:	56 94       	lsr	r5
    1012:	47 94       	ror	r4
    1014:	37 94       	ror	r3
    1016:	27 94       	ror	r2
    1018:	c3 cf       	rjmp	.-122    	; 0xfa0 <__mulsf3+0xb0>
    101a:	fa 85       	ldd	r31, Y+10	; 0x0a
    101c:	ea 89       	ldd	r30, Y+18	; 0x12
    101e:	2b 89       	ldd	r18, Y+19	; 0x13
    1020:	3c 89       	ldd	r19, Y+20	; 0x14
    1022:	8b 85       	ldd	r24, Y+11	; 0x0b
    1024:	9c 85       	ldd	r25, Y+12	; 0x0c
    1026:	28 0f       	add	r18, r24
    1028:	39 1f       	adc	r19, r25
    102a:	2e 5f       	subi	r18, 0xFE	; 254
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	17 c0       	rjmp	.+46     	; 0x105e <__mulsf3+0x16e>
    1030:	ca 01       	movw	r24, r20
    1032:	81 70       	andi	r24, 0x01	; 1
    1034:	90 70       	andi	r25, 0x00	; 0
    1036:	89 2b       	or	r24, r25
    1038:	61 f0       	breq	.+24     	; 0x1052 <__mulsf3+0x162>
    103a:	16 95       	lsr	r17
    103c:	07 95       	ror	r16
    103e:	f7 94       	ror	r15
    1040:	e7 94       	ror	r14
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e8       	ldi	r27, 0x80	; 128
    104a:	e8 2a       	or	r14, r24
    104c:	f9 2a       	or	r15, r25
    104e:	0a 2b       	or	r16, r26
    1050:	1b 2b       	or	r17, r27
    1052:	76 95       	lsr	r23
    1054:	67 95       	ror	r22
    1056:	57 95       	ror	r21
    1058:	47 95       	ror	r20
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	77 fd       	sbrc	r23, 7
    1060:	e7 cf       	rjmp	.-50     	; 0x1030 <__mulsf3+0x140>
    1062:	0c c0       	rjmp	.+24     	; 0x107c <__mulsf3+0x18c>
    1064:	44 0f       	add	r20, r20
    1066:	55 1f       	adc	r21, r21
    1068:	66 1f       	adc	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	17 fd       	sbrc	r17, 7
    106e:	41 60       	ori	r20, 0x01	; 1
    1070:	ee 0c       	add	r14, r14
    1072:	ff 1c       	adc	r15, r15
    1074:	00 1f       	adc	r16, r16
    1076:	11 1f       	adc	r17, r17
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	30 40       	sbci	r19, 0x00	; 0
    107c:	40 30       	cpi	r20, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	59 07       	cpc	r21, r25
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	69 07       	cpc	r22, r25
    1086:	90 e4       	ldi	r25, 0x40	; 64
    1088:	79 07       	cpc	r23, r25
    108a:	60 f3       	brcs	.-40     	; 0x1064 <__mulsf3+0x174>
    108c:	2b 8f       	std	Y+27, r18	; 0x1b
    108e:	3c 8f       	std	Y+28, r19	; 0x1c
    1090:	db 01       	movw	r26, r22
    1092:	ca 01       	movw	r24, r20
    1094:	8f 77       	andi	r24, 0x7F	; 127
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	a0 70       	andi	r26, 0x00	; 0
    109a:	b0 70       	andi	r27, 0x00	; 0
    109c:	80 34       	cpi	r24, 0x40	; 64
    109e:	91 05       	cpc	r25, r1
    10a0:	a1 05       	cpc	r26, r1
    10a2:	b1 05       	cpc	r27, r1
    10a4:	61 f4       	brne	.+24     	; 0x10be <__mulsf3+0x1ce>
    10a6:	47 fd       	sbrc	r20, 7
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <__mulsf3+0x1ce>
    10aa:	e1 14       	cp	r14, r1
    10ac:	f1 04       	cpc	r15, r1
    10ae:	01 05       	cpc	r16, r1
    10b0:	11 05       	cpc	r17, r1
    10b2:	29 f0       	breq	.+10     	; 0x10be <__mulsf3+0x1ce>
    10b4:	40 5c       	subi	r20, 0xC0	; 192
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	6f 4f       	sbci	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	40 78       	andi	r20, 0x80	; 128
    10be:	1a 8e       	std	Y+26, r1	; 0x1a
    10c0:	fe 17       	cp	r31, r30
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <__mulsf3+0x1d8>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8a 8f       	std	Y+26, r24	; 0x1a
    10c8:	4d 8f       	std	Y+29, r20	; 0x1d
    10ca:	5e 8f       	std	Y+30, r21	; 0x1e
    10cc:	6f 8f       	std	Y+31, r22	; 0x1f
    10ce:	78 a3       	std	Y+32, r23	; 0x20
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	89 8f       	std	Y+25, r24	; 0x19
    10d4:	ce 01       	movw	r24, r28
    10d6:	49 96       	adiw	r24, 0x19	; 25
    10d8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__pack_f>
    10dc:	a0 96       	adiw	r28, 0x20	; 32
    10de:	e2 e1       	ldi	r30, 0x12	; 18
    10e0:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__epilogue_restores__>

000010e4 <__divsf3>:
    10e4:	a8 e1       	ldi	r26, 0x18	; 24
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e7       	ldi	r30, 0x78	; 120
    10ea:	f8 e0       	ldi	r31, 0x08	; 8
    10ec:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__prologue_saves__+0x10>
    10f0:	69 83       	std	Y+1, r22	; 0x01
    10f2:	7a 83       	std	Y+2, r23	; 0x02
    10f4:	8b 83       	std	Y+3, r24	; 0x03
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	2d 83       	std	Y+5, r18	; 0x05
    10fa:	3e 83       	std	Y+6, r19	; 0x06
    10fc:	4f 83       	std	Y+7, r20	; 0x07
    10fe:	58 87       	std	Y+8, r21	; 0x08
    1100:	b9 e0       	ldi	r27, 0x09	; 9
    1102:	eb 2e       	mov	r14, r27
    1104:	f1 2c       	mov	r15, r1
    1106:	ec 0e       	add	r14, r28
    1108:	fd 1e       	adc	r15, r29
    110a:	ce 01       	movw	r24, r28
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	b7 01       	movw	r22, r14
    1110:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    1114:	8e 01       	movw	r16, r28
    1116:	0f 5e       	subi	r16, 0xEF	; 239
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	ce 01       	movw	r24, r28
    111c:	05 96       	adiw	r24, 0x05	; 5
    111e:	b8 01       	movw	r22, r16
    1120:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    1124:	29 85       	ldd	r18, Y+9	; 0x09
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	08 f4       	brcc	.+2      	; 0x112c <__divsf3+0x48>
    112a:	7e c0       	rjmp	.+252    	; 0x1228 <__divsf3+0x144>
    112c:	39 89       	ldd	r19, Y+17	; 0x11
    112e:	32 30       	cpi	r19, 0x02	; 2
    1130:	10 f4       	brcc	.+4      	; 0x1136 <__divsf3+0x52>
    1132:	b8 01       	movw	r22, r16
    1134:	7c c0       	rjmp	.+248    	; 0x122e <__divsf3+0x14a>
    1136:	8a 85       	ldd	r24, Y+10	; 0x0a
    1138:	9a 89       	ldd	r25, Y+18	; 0x12
    113a:	89 27       	eor	r24, r25
    113c:	8a 87       	std	Y+10, r24	; 0x0a
    113e:	24 30       	cpi	r18, 0x04	; 4
    1140:	11 f0       	breq	.+4      	; 0x1146 <__divsf3+0x62>
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 f4       	brne	.+12     	; 0x1152 <__divsf3+0x6e>
    1146:	23 17       	cp	r18, r19
    1148:	09 f0       	breq	.+2      	; 0x114c <__divsf3+0x68>
    114a:	6e c0       	rjmp	.+220    	; 0x1228 <__divsf3+0x144>
    114c:	6a e6       	ldi	r22, 0x6A	; 106
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	6e c0       	rjmp	.+220    	; 0x122e <__divsf3+0x14a>
    1152:	34 30       	cpi	r19, 0x04	; 4
    1154:	39 f4       	brne	.+14     	; 0x1164 <__divsf3+0x80>
    1156:	1d 86       	std	Y+13, r1	; 0x0d
    1158:	1e 86       	std	Y+14, r1	; 0x0e
    115a:	1f 86       	std	Y+15, r1	; 0x0f
    115c:	18 8a       	std	Y+16, r1	; 0x10
    115e:	1c 86       	std	Y+12, r1	; 0x0c
    1160:	1b 86       	std	Y+11, r1	; 0x0b
    1162:	04 c0       	rjmp	.+8      	; 0x116c <__divsf3+0x88>
    1164:	32 30       	cpi	r19, 0x02	; 2
    1166:	21 f4       	brne	.+8      	; 0x1170 <__divsf3+0x8c>
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	89 87       	std	Y+9, r24	; 0x09
    116c:	b7 01       	movw	r22, r14
    116e:	5f c0       	rjmp	.+190    	; 0x122e <__divsf3+0x14a>
    1170:	2b 85       	ldd	r18, Y+11	; 0x0b
    1172:	3c 85       	ldd	r19, Y+12	; 0x0c
    1174:	8b 89       	ldd	r24, Y+19	; 0x13
    1176:	9c 89       	ldd	r25, Y+20	; 0x14
    1178:	28 1b       	sub	r18, r24
    117a:	39 0b       	sbc	r19, r25
    117c:	3c 87       	std	Y+12, r19	; 0x0c
    117e:	2b 87       	std	Y+11, r18	; 0x0b
    1180:	ed 84       	ldd	r14, Y+13	; 0x0d
    1182:	fe 84       	ldd	r15, Y+14	; 0x0e
    1184:	0f 85       	ldd	r16, Y+15	; 0x0f
    1186:	18 89       	ldd	r17, Y+16	; 0x10
    1188:	ad 88       	ldd	r10, Y+21	; 0x15
    118a:	be 88       	ldd	r11, Y+22	; 0x16
    118c:	cf 88       	ldd	r12, Y+23	; 0x17
    118e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1190:	ea 14       	cp	r14, r10
    1192:	fb 04       	cpc	r15, r11
    1194:	0c 05       	cpc	r16, r12
    1196:	1d 05       	cpc	r17, r13
    1198:	40 f4       	brcc	.+16     	; 0x11aa <__divsf3+0xc6>
    119a:	ee 0c       	add	r14, r14
    119c:	ff 1c       	adc	r15, r15
    119e:	00 1f       	adc	r16, r16
    11a0:	11 1f       	adc	r17, r17
    11a2:	21 50       	subi	r18, 0x01	; 1
    11a4:	30 40       	sbci	r19, 0x00	; 0
    11a6:	3c 87       	std	Y+12, r19	; 0x0c
    11a8:	2b 87       	std	Y+11, r18	; 0x0b
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e4       	ldi	r27, 0x40	; 64
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	ea 14       	cp	r14, r10
    11c0:	fb 04       	cpc	r15, r11
    11c2:	0c 05       	cpc	r16, r12
    11c4:	1d 05       	cpc	r17, r13
    11c6:	40 f0       	brcs	.+16     	; 0x11d8 <__divsf3+0xf4>
    11c8:	28 2b       	or	r18, r24
    11ca:	39 2b       	or	r19, r25
    11cc:	4a 2b       	or	r20, r26
    11ce:	5b 2b       	or	r21, r27
    11d0:	ea 18       	sub	r14, r10
    11d2:	fb 08       	sbc	r15, r11
    11d4:	0c 09       	sbc	r16, r12
    11d6:	1d 09       	sbc	r17, r13
    11d8:	b6 95       	lsr	r27
    11da:	a7 95       	ror	r26
    11dc:	97 95       	ror	r25
    11de:	87 95       	ror	r24
    11e0:	ee 0c       	add	r14, r14
    11e2:	ff 1c       	adc	r15, r15
    11e4:	00 1f       	adc	r16, r16
    11e6:	11 1f       	adc	r17, r17
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	6f 31       	cpi	r22, 0x1F	; 31
    11ee:	71 05       	cpc	r23, r1
    11f0:	31 f7       	brne	.-52     	; 0x11be <__divsf3+0xda>
    11f2:	da 01       	movw	r26, r20
    11f4:	c9 01       	movw	r24, r18
    11f6:	8f 77       	andi	r24, 0x7F	; 127
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	a0 70       	andi	r26, 0x00	; 0
    11fc:	b0 70       	andi	r27, 0x00	; 0
    11fe:	80 34       	cpi	r24, 0x40	; 64
    1200:	91 05       	cpc	r25, r1
    1202:	a1 05       	cpc	r26, r1
    1204:	b1 05       	cpc	r27, r1
    1206:	61 f4       	brne	.+24     	; 0x1220 <__divsf3+0x13c>
    1208:	27 fd       	sbrc	r18, 7
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <__divsf3+0x13c>
    120c:	e1 14       	cp	r14, r1
    120e:	f1 04       	cpc	r15, r1
    1210:	01 05       	cpc	r16, r1
    1212:	11 05       	cpc	r17, r1
    1214:	29 f0       	breq	.+10     	; 0x1220 <__divsf3+0x13c>
    1216:	20 5c       	subi	r18, 0xC0	; 192
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	4f 4f       	sbci	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	20 78       	andi	r18, 0x80	; 128
    1220:	2d 87       	std	Y+13, r18	; 0x0d
    1222:	3e 87       	std	Y+14, r19	; 0x0e
    1224:	4f 87       	std	Y+15, r20	; 0x0f
    1226:	58 8b       	std	Y+16, r21	; 0x10
    1228:	be 01       	movw	r22, r28
    122a:	67 5f       	subi	r22, 0xF7	; 247
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	cb 01       	movw	r24, r22
    1230:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__pack_f>
    1234:	68 96       	adiw	r28, 0x18	; 24
    1236:	ea e0       	ldi	r30, 0x0A	; 10
    1238:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__epilogue_restores__+0x10>

0000123c <__gtsf2>:
    123c:	a8 e1       	ldi	r26, 0x18	; 24
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e4 e2       	ldi	r30, 0x24	; 36
    1242:	f9 e0       	ldi	r31, 0x09	; 9
    1244:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__+0x18>
    1248:	69 83       	std	Y+1, r22	; 0x01
    124a:	7a 83       	std	Y+2, r23	; 0x02
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	4f 83       	std	Y+7, r20	; 0x07
    1256:	58 87       	std	Y+8, r21	; 0x08
    1258:	89 e0       	ldi	r24, 0x09	; 9
    125a:	e8 2e       	mov	r14, r24
    125c:	f1 2c       	mov	r15, r1
    125e:	ec 0e       	add	r14, r28
    1260:	fd 1e       	adc	r15, r29
    1262:	ce 01       	movw	r24, r28
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	b7 01       	movw	r22, r14
    1268:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    126c:	8e 01       	movw	r16, r28
    126e:	0f 5e       	subi	r16, 0xEF	; 239
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	ce 01       	movw	r24, r28
    1274:	05 96       	adiw	r24, 0x05	; 5
    1276:	b8 01       	movw	r22, r16
    1278:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	40 f0       	brcs	.+16     	; 0x1292 <__gtsf2+0x56>
    1282:	89 89       	ldd	r24, Y+17	; 0x11
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	28 f0       	brcs	.+10     	; 0x1292 <__gtsf2+0x56>
    1288:	c7 01       	movw	r24, r14
    128a:	b8 01       	movw	r22, r16
    128c:	0e 94 17 0c 	call	0x182e	; 0x182e <__fpcmp_parts_f>
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <__gtsf2+0x58>
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	68 96       	adiw	r28, 0x18	; 24
    1296:	e6 e0       	ldi	r30, 0x06	; 6
    1298:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__+0x18>

0000129c <__gesf2>:
    129c:	a8 e1       	ldi	r26, 0x18	; 24
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e5       	ldi	r30, 0x54	; 84
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__+0x18>
    12a8:	69 83       	std	Y+1, r22	; 0x01
    12aa:	7a 83       	std	Y+2, r23	; 0x02
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	2d 83       	std	Y+5, r18	; 0x05
    12b2:	3e 83       	std	Y+6, r19	; 0x06
    12b4:	4f 83       	std	Y+7, r20	; 0x07
    12b6:	58 87       	std	Y+8, r21	; 0x08
    12b8:	89 e0       	ldi	r24, 0x09	; 9
    12ba:	e8 2e       	mov	r14, r24
    12bc:	f1 2c       	mov	r15, r1
    12be:	ec 0e       	add	r14, r28
    12c0:	fd 1e       	adc	r15, r29
    12c2:	ce 01       	movw	r24, r28
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	b7 01       	movw	r22, r14
    12c8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    12cc:	8e 01       	movw	r16, r28
    12ce:	0f 5e       	subi	r16, 0xEF	; 239
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	ce 01       	movw	r24, r28
    12d4:	05 96       	adiw	r24, 0x05	; 5
    12d6:	b8 01       	movw	r22, r16
    12d8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	40 f0       	brcs	.+16     	; 0x12f2 <__gesf2+0x56>
    12e2:	89 89       	ldd	r24, Y+17	; 0x11
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	28 f0       	brcs	.+10     	; 0x12f2 <__gesf2+0x56>
    12e8:	c7 01       	movw	r24, r14
    12ea:	b8 01       	movw	r22, r16
    12ec:	0e 94 17 0c 	call	0x182e	; 0x182e <__fpcmp_parts_f>
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <__gesf2+0x58>
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	68 96       	adiw	r28, 0x18	; 24
    12f6:	e6 e0       	ldi	r30, 0x06	; 6
    12f8:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__+0x18>

000012fc <__ltsf2>:
    12fc:	a8 e1       	ldi	r26, 0x18	; 24
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e8       	ldi	r30, 0x84	; 132
    1302:	f9 e0       	ldi	r31, 0x09	; 9
    1304:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__+0x18>
    1308:	69 83       	std	Y+1, r22	; 0x01
    130a:	7a 83       	std	Y+2, r23	; 0x02
    130c:	8b 83       	std	Y+3, r24	; 0x03
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	2d 83       	std	Y+5, r18	; 0x05
    1312:	3e 83       	std	Y+6, r19	; 0x06
    1314:	4f 83       	std	Y+7, r20	; 0x07
    1316:	58 87       	std	Y+8, r21	; 0x08
    1318:	89 e0       	ldi	r24, 0x09	; 9
    131a:	e8 2e       	mov	r14, r24
    131c:	f1 2c       	mov	r15, r1
    131e:	ec 0e       	add	r14, r28
    1320:	fd 1e       	adc	r15, r29
    1322:	ce 01       	movw	r24, r28
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	b7 01       	movw	r22, r14
    1328:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    132c:	8e 01       	movw	r16, r28
    132e:	0f 5e       	subi	r16, 0xEF	; 239
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	ce 01       	movw	r24, r28
    1334:	05 96       	adiw	r24, 0x05	; 5
    1336:	b8 01       	movw	r22, r16
    1338:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	40 f0       	brcs	.+16     	; 0x1352 <__ltsf2+0x56>
    1342:	89 89       	ldd	r24, Y+17	; 0x11
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	28 f0       	brcs	.+10     	; 0x1352 <__ltsf2+0x56>
    1348:	c7 01       	movw	r24, r14
    134a:	b8 01       	movw	r22, r16
    134c:	0e 94 17 0c 	call	0x182e	; 0x182e <__fpcmp_parts_f>
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <__ltsf2+0x58>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	68 96       	adiw	r28, 0x18	; 24
    1356:	e6 e0       	ldi	r30, 0x06	; 6
    1358:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__+0x18>

0000135c <__fixsfsi>:
    135c:	ac e0       	ldi	r26, 0x0C	; 12
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__prologue_saves__+0x20>
    1368:	69 83       	std	Y+1, r22	; 0x01
    136a:	7a 83       	std	Y+2, r23	; 0x02
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	be 01       	movw	r22, r28
    1376:	6b 5f       	subi	r22, 0xFB	; 251
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__unpack_f>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	61 f1       	breq	.+88     	; 0x13dc <__fixsfsi+0x80>
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	50 f1       	brcs	.+84     	; 0x13dc <__fixsfsi+0x80>
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	21 f4       	brne	.+8      	; 0x1394 <__fixsfsi+0x38>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	88 23       	and	r24, r24
    1390:	51 f1       	breq	.+84     	; 0x13e6 <__fixsfsi+0x8a>
    1392:	2e c0       	rjmp	.+92     	; 0x13f0 <__fixsfsi+0x94>
    1394:	2f 81       	ldd	r18, Y+7	; 0x07
    1396:	38 85       	ldd	r19, Y+8	; 0x08
    1398:	37 fd       	sbrc	r19, 7
    139a:	20 c0       	rjmp	.+64     	; 0x13dc <__fixsfsi+0x80>
    139c:	6e 81       	ldd	r22, Y+6	; 0x06
    139e:	2f 31       	cpi	r18, 0x1F	; 31
    13a0:	31 05       	cpc	r19, r1
    13a2:	1c f0       	brlt	.+6      	; 0x13aa <__fixsfsi+0x4e>
    13a4:	66 23       	and	r22, r22
    13a6:	f9 f0       	breq	.+62     	; 0x13e6 <__fixsfsi+0x8a>
    13a8:	23 c0       	rjmp	.+70     	; 0x13f0 <__fixsfsi+0x94>
    13aa:	8e e1       	ldi	r24, 0x1E	; 30
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	82 1b       	sub	r24, r18
    13b0:	93 0b       	sbc	r25, r19
    13b2:	29 85       	ldd	r18, Y+9	; 0x09
    13b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    13b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <__fixsfsi+0x68>
    13bc:	56 95       	lsr	r21
    13be:	47 95       	ror	r20
    13c0:	37 95       	ror	r19
    13c2:	27 95       	ror	r18
    13c4:	8a 95       	dec	r24
    13c6:	d2 f7       	brpl	.-12     	; 0x13bc <__fixsfsi+0x60>
    13c8:	66 23       	and	r22, r22
    13ca:	b1 f0       	breq	.+44     	; 0x13f8 <__fixsfsi+0x9c>
    13cc:	50 95       	com	r21
    13ce:	40 95       	com	r20
    13d0:	30 95       	com	r19
    13d2:	21 95       	neg	r18
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	4f 4f       	sbci	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <__fixsfsi+0x9c>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <__fixsfsi+0x9c>
    13e6:	2f ef       	ldi	r18, 0xFF	; 255
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	4f ef       	ldi	r20, 0xFF	; 255
    13ec:	5f e7       	ldi	r21, 0x7F	; 127
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <__fixsfsi+0x9c>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e8       	ldi	r21, 0x80	; 128
    13f8:	b9 01       	movw	r22, r18
    13fa:	ca 01       	movw	r24, r20
    13fc:	2c 96       	adiw	r28, 0x0c	; 12
    13fe:	e2 e0       	ldi	r30, 0x02	; 2
    1400:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__epilogue_restores__+0x20>

00001404 <__floatunsisf>:
    1404:	a8 e0       	ldi	r26, 0x08	; 8
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e0       	ldi	r30, 0x08	; 8
    140a:	fa e0       	ldi	r31, 0x0A	; 10
    140c:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__prologue_saves__+0x10>
    1410:	7b 01       	movw	r14, r22
    1412:	8c 01       	movw	r16, r24
    1414:	61 15       	cp	r22, r1
    1416:	71 05       	cpc	r23, r1
    1418:	81 05       	cpc	r24, r1
    141a:	91 05       	cpc	r25, r1
    141c:	19 f4       	brne	.+6      	; 0x1424 <__floatunsisf+0x20>
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	60 c0       	rjmp	.+192    	; 0x14e4 <__floatunsisf+0xe0>
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	8e e1       	ldi	r24, 0x1E	; 30
    142a:	c8 2e       	mov	r12, r24
    142c:	d1 2c       	mov	r13, r1
    142e:	dc 82       	std	Y+4, r13	; 0x04
    1430:	cb 82       	std	Y+3, r12	; 0x03
    1432:	ed 82       	std	Y+5, r14	; 0x05
    1434:	fe 82       	std	Y+6, r15	; 0x06
    1436:	0f 83       	std	Y+7, r16	; 0x07
    1438:	18 87       	std	Y+8, r17	; 0x08
    143a:	c8 01       	movw	r24, r16
    143c:	b7 01       	movw	r22, r14
    143e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__clzsi2>
    1442:	fc 01       	movw	r30, r24
    1444:	31 97       	sbiw	r30, 0x01	; 1
    1446:	f7 ff       	sbrs	r31, 7
    1448:	3b c0       	rjmp	.+118    	; 0x14c0 <__floatunsisf+0xbc>
    144a:	22 27       	eor	r18, r18
    144c:	33 27       	eor	r19, r19
    144e:	2e 1b       	sub	r18, r30
    1450:	3f 0b       	sbc	r19, r31
    1452:	57 01       	movw	r10, r14
    1454:	68 01       	movw	r12, r16
    1456:	02 2e       	mov	r0, r18
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <__floatunsisf+0x5e>
    145a:	d6 94       	lsr	r13
    145c:	c7 94       	ror	r12
    145e:	b7 94       	ror	r11
    1460:	a7 94       	ror	r10
    1462:	0a 94       	dec	r0
    1464:	d2 f7       	brpl	.-12     	; 0x145a <__floatunsisf+0x56>
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__floatunsisf+0x7c>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	aa 1f       	adc	r26, r26
    147e:	bb 1f       	adc	r27, r27
    1480:	2a 95       	dec	r18
    1482:	d2 f7       	brpl	.-12     	; 0x1478 <__floatunsisf+0x74>
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	a1 09       	sbc	r26, r1
    1488:	b1 09       	sbc	r27, r1
    148a:	8e 21       	and	r24, r14
    148c:	9f 21       	and	r25, r15
    148e:	a0 23       	and	r26, r16
    1490:	b1 23       	and	r27, r17
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	a1 05       	cpc	r26, r1
    1496:	b1 05       	cpc	r27, r1
    1498:	21 f0       	breq	.+8      	; 0x14a2 <__floatunsisf+0x9e>
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	4a 29       	or	r20, r10
    14a4:	5b 29       	or	r21, r11
    14a6:	6c 29       	or	r22, r12
    14a8:	7d 29       	or	r23, r13
    14aa:	4d 83       	std	Y+5, r20	; 0x05
    14ac:	5e 83       	std	Y+6, r21	; 0x06
    14ae:	6f 83       	std	Y+7, r22	; 0x07
    14b0:	78 87       	std	Y+8, r23	; 0x08
    14b2:	8e e1       	ldi	r24, 0x1E	; 30
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	8e 1b       	sub	r24, r30
    14b8:	9f 0b       	sbc	r25, r31
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	12 c0       	rjmp	.+36     	; 0x14e4 <__floatunsisf+0xe0>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <__floatunsisf+0xe0>
    14c4:	0e 2e       	mov	r0, r30
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <__floatunsisf+0xcc>
    14c8:	ee 0c       	add	r14, r14
    14ca:	ff 1c       	adc	r15, r15
    14cc:	00 1f       	adc	r16, r16
    14ce:	11 1f       	adc	r17, r17
    14d0:	0a 94       	dec	r0
    14d2:	d2 f7       	brpl	.-12     	; 0x14c8 <__floatunsisf+0xc4>
    14d4:	ed 82       	std	Y+5, r14	; 0x05
    14d6:	fe 82       	std	Y+6, r15	; 0x06
    14d8:	0f 83       	std	Y+7, r16	; 0x07
    14da:	18 87       	std	Y+8, r17	; 0x08
    14dc:	ce 1a       	sub	r12, r30
    14de:	df 0a       	sbc	r13, r31
    14e0:	dc 82       	std	Y+4, r13	; 0x04
    14e2:	cb 82       	std	Y+3, r12	; 0x03
    14e4:	1a 82       	std	Y+2, r1	; 0x02
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__pack_f>
    14ee:	28 96       	adiw	r28, 0x08	; 8
    14f0:	ea e0       	ldi	r30, 0x0A	; 10
    14f2:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__epilogue_restores__+0x10>

000014f6 <__clzsi2>:
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	7b 01       	movw	r14, r22
    1500:	8c 01       	movw	r16, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	e8 16       	cp	r14, r24
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	f8 06       	cpc	r15, r24
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 07       	cpc	r16, r24
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	18 07       	cpc	r17, r24
    1512:	88 f4       	brcc	.+34     	; 0x1536 <__clzsi2+0x40>
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	e8 16       	cp	r14, r24
    1518:	f1 04       	cpc	r15, r1
    151a:	01 05       	cpc	r16, r1
    151c:	11 05       	cpc	r17, r1
    151e:	31 f0       	breq	.+12     	; 0x152c <__clzsi2+0x36>
    1520:	28 f0       	brcs	.+10     	; 0x152c <__clzsi2+0x36>
    1522:	88 e0       	ldi	r24, 0x08	; 8
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	17 c0       	rjmp	.+46     	; 0x155a <__clzsi2+0x64>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	12 c0       	rjmp	.+36     	; 0x155a <__clzsi2+0x64>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	e8 16       	cp	r14, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	f8 06       	cpc	r15, r24
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	08 07       	cpc	r16, r24
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	18 07       	cpc	r17, r24
    1546:	28 f0       	brcs	.+10     	; 0x1552 <__clzsi2+0x5c>
    1548:	88 e1       	ldi	r24, 0x18	; 24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	04 c0       	rjmp	.+8      	; 0x155a <__clzsi2+0x64>
    1552:	80 e1       	ldi	r24, 0x10	; 16
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	20 e2       	ldi	r18, 0x20	; 32
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	28 1b       	sub	r18, r24
    1564:	39 0b       	sbc	r19, r25
    1566:	4a 0b       	sbc	r20, r26
    1568:	5b 0b       	sbc	r21, r27
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <__clzsi2+0x7e>
    156c:	16 95       	lsr	r17
    156e:	07 95       	ror	r16
    1570:	f7 94       	ror	r15
    1572:	e7 94       	ror	r14
    1574:	8a 95       	dec	r24
    1576:	d2 f7       	brpl	.-12     	; 0x156c <__clzsi2+0x76>
    1578:	f7 01       	movw	r30, r14
    157a:	ee 58       	subi	r30, 0x8E	; 142
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	28 1b       	sub	r18, r24
    1582:	31 09       	sbc	r19, r1
    1584:	41 09       	sbc	r20, r1
    1586:	51 09       	sbc	r21, r1
    1588:	c9 01       	movw	r24, r18
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	08 95       	ret

00001594 <__pack_f>:
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	fc 01       	movw	r30, r24
    15a0:	e4 80       	ldd	r14, Z+4	; 0x04
    15a2:	f5 80       	ldd	r15, Z+5	; 0x05
    15a4:	06 81       	ldd	r16, Z+6	; 0x06
    15a6:	17 81       	ldd	r17, Z+7	; 0x07
    15a8:	d1 80       	ldd	r13, Z+1	; 0x01
    15aa:	80 81       	ld	r24, Z
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	48 f4       	brcc	.+18     	; 0x15c2 <__pack_f+0x2e>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e1       	ldi	r26, 0x10	; 16
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 2a       	or	r14, r24
    15ba:	f9 2a       	or	r15, r25
    15bc:	0a 2b       	or	r16, r26
    15be:	1b 2b       	or	r17, r27
    15c0:	a5 c0       	rjmp	.+330    	; 0x170c <__pack_f+0x178>
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <__pack_f+0x34>
    15c6:	9f c0       	rjmp	.+318    	; 0x1706 <__pack_f+0x172>
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <__pack_f+0x40>
    15cc:	ee 24       	eor	r14, r14
    15ce:	ff 24       	eor	r15, r15
    15d0:	87 01       	movw	r16, r14
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <__pack_f+0x4a>
    15d4:	e1 14       	cp	r14, r1
    15d6:	f1 04       	cpc	r15, r1
    15d8:	01 05       	cpc	r16, r1
    15da:	11 05       	cpc	r17, r1
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <__pack_f+0x50>
    15de:	e0 e0       	ldi	r30, 0x00	; 0
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	96 c0       	rjmp	.+300    	; 0x1710 <__pack_f+0x17c>
    15e4:	62 81       	ldd	r22, Z+2	; 0x02
    15e6:	73 81       	ldd	r23, Z+3	; 0x03
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	62 38       	cpi	r22, 0x82	; 130
    15ec:	79 07       	cpc	r23, r25
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <__pack_f+0x5e>
    15f0:	5b c0       	rjmp	.+182    	; 0x16a8 <__pack_f+0x114>
    15f2:	22 e8       	ldi	r18, 0x82	; 130
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	26 1b       	sub	r18, r22
    15f8:	37 0b       	sbc	r19, r23
    15fa:	2a 31       	cpi	r18, 0x1A	; 26
    15fc:	31 05       	cpc	r19, r1
    15fe:	2c f0       	brlt	.+10     	; 0x160a <__pack_f+0x76>
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	2a c0       	rjmp	.+84     	; 0x165e <__pack_f+0xca>
    160a:	b8 01       	movw	r22, r16
    160c:	a7 01       	movw	r20, r14
    160e:	02 2e       	mov	r0, r18
    1610:	04 c0       	rjmp	.+8      	; 0x161a <__pack_f+0x86>
    1612:	76 95       	lsr	r23
    1614:	67 95       	ror	r22
    1616:	57 95       	ror	r21
    1618:	47 95       	ror	r20
    161a:	0a 94       	dec	r0
    161c:	d2 f7       	brpl	.-12     	; 0x1612 <__pack_f+0x7e>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__pack_f+0x9c>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	2a 95       	dec	r18
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__pack_f+0x94>
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	a1 09       	sbc	r26, r1
    1638:	b1 09       	sbc	r27, r1
    163a:	8e 21       	and	r24, r14
    163c:	9f 21       	and	r25, r15
    163e:	a0 23       	and	r26, r16
    1640:	b1 23       	and	r27, r17
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	a1 05       	cpc	r26, r1
    1646:	b1 05       	cpc	r27, r1
    1648:	21 f0       	breq	.+8      	; 0x1652 <__pack_f+0xbe>
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	9a 01       	movw	r18, r20
    1654:	ab 01       	movw	r20, r22
    1656:	28 2b       	or	r18, r24
    1658:	39 2b       	or	r19, r25
    165a:	4a 2b       	or	r20, r26
    165c:	5b 2b       	or	r21, r27
    165e:	da 01       	movw	r26, r20
    1660:	c9 01       	movw	r24, r18
    1662:	8f 77       	andi	r24, 0x7F	; 127
    1664:	90 70       	andi	r25, 0x00	; 0
    1666:	a0 70       	andi	r26, 0x00	; 0
    1668:	b0 70       	andi	r27, 0x00	; 0
    166a:	80 34       	cpi	r24, 0x40	; 64
    166c:	91 05       	cpc	r25, r1
    166e:	a1 05       	cpc	r26, r1
    1670:	b1 05       	cpc	r27, r1
    1672:	39 f4       	brne	.+14     	; 0x1682 <__pack_f+0xee>
    1674:	27 ff       	sbrs	r18, 7
    1676:	09 c0       	rjmp	.+18     	; 0x168a <__pack_f+0xf6>
    1678:	20 5c       	subi	r18, 0xC0	; 192
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	4f 4f       	sbci	r20, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255
    1680:	04 c0       	rjmp	.+8      	; 0x168a <__pack_f+0xf6>
    1682:	21 5c       	subi	r18, 0xC1	; 193
    1684:	3f 4f       	sbci	r19, 0xFF	; 255
    1686:	4f 4f       	sbci	r20, 0xFF	; 255
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	e0 e0       	ldi	r30, 0x00	; 0
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	20 30       	cpi	r18, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	3a 07       	cpc	r19, r26
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	4a 07       	cpc	r20, r26
    1698:	a0 e4       	ldi	r26, 0x40	; 64
    169a:	5a 07       	cpc	r21, r26
    169c:	10 f0       	brcs	.+4      	; 0x16a2 <__pack_f+0x10e>
    169e:	e1 e0       	ldi	r30, 0x01	; 1
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	79 01       	movw	r14, r18
    16a4:	8a 01       	movw	r16, r20
    16a6:	27 c0       	rjmp	.+78     	; 0x16f6 <__pack_f+0x162>
    16a8:	60 38       	cpi	r22, 0x80	; 128
    16aa:	71 05       	cpc	r23, r1
    16ac:	64 f5       	brge	.+88     	; 0x1706 <__pack_f+0x172>
    16ae:	fb 01       	movw	r30, r22
    16b0:	e1 58       	subi	r30, 0x81	; 129
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	d8 01       	movw	r26, r16
    16b6:	c7 01       	movw	r24, r14
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	90 70       	andi	r25, 0x00	; 0
    16bc:	a0 70       	andi	r26, 0x00	; 0
    16be:	b0 70       	andi	r27, 0x00	; 0
    16c0:	80 34       	cpi	r24, 0x40	; 64
    16c2:	91 05       	cpc	r25, r1
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	39 f4       	brne	.+14     	; 0x16d8 <__pack_f+0x144>
    16ca:	e7 fe       	sbrs	r14, 7
    16cc:	0d c0       	rjmp	.+26     	; 0x16e8 <__pack_f+0x154>
    16ce:	80 e4       	ldi	r24, 0x40	; 64
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <__pack_f+0x14c>
    16d8:	8f e3       	ldi	r24, 0x3F	; 63
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a0 e0       	ldi	r26, 0x00	; 0
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e8 0e       	add	r14, r24
    16e2:	f9 1e       	adc	r15, r25
    16e4:	0a 1f       	adc	r16, r26
    16e6:	1b 1f       	adc	r17, r27
    16e8:	17 ff       	sbrs	r17, 7
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <__pack_f+0x162>
    16ec:	16 95       	lsr	r17
    16ee:	07 95       	ror	r16
    16f0:	f7 94       	ror	r15
    16f2:	e7 94       	ror	r14
    16f4:	31 96       	adiw	r30, 0x01	; 1
    16f6:	87 e0       	ldi	r24, 0x07	; 7
    16f8:	16 95       	lsr	r17
    16fa:	07 95       	ror	r16
    16fc:	f7 94       	ror	r15
    16fe:	e7 94       	ror	r14
    1700:	8a 95       	dec	r24
    1702:	d1 f7       	brne	.-12     	; 0x16f8 <__pack_f+0x164>
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <__pack_f+0x17c>
    1706:	ee 24       	eor	r14, r14
    1708:	ff 24       	eor	r15, r15
    170a:	87 01       	movw	r16, r14
    170c:	ef ef       	ldi	r30, 0xFF	; 255
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	6e 2f       	mov	r22, r30
    1712:	67 95       	ror	r22
    1714:	66 27       	eor	r22, r22
    1716:	67 95       	ror	r22
    1718:	90 2f       	mov	r25, r16
    171a:	9f 77       	andi	r25, 0x7F	; 127
    171c:	d7 94       	ror	r13
    171e:	dd 24       	eor	r13, r13
    1720:	d7 94       	ror	r13
    1722:	8e 2f       	mov	r24, r30
    1724:	86 95       	lsr	r24
    1726:	49 2f       	mov	r20, r25
    1728:	46 2b       	or	r20, r22
    172a:	58 2f       	mov	r21, r24
    172c:	5d 29       	or	r21, r13
    172e:	b7 01       	movw	r22, r14
    1730:	ca 01       	movw	r24, r20
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	08 95       	ret

0000173e <__unpack_f>:
    173e:	fc 01       	movw	r30, r24
    1740:	db 01       	movw	r26, r22
    1742:	40 81       	ld	r20, Z
    1744:	51 81       	ldd	r21, Z+1	; 0x01
    1746:	22 81       	ldd	r18, Z+2	; 0x02
    1748:	62 2f       	mov	r22, r18
    174a:	6f 77       	andi	r22, 0x7F	; 127
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	22 1f       	adc	r18, r18
    1750:	22 27       	eor	r18, r18
    1752:	22 1f       	adc	r18, r18
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	89 2f       	mov	r24, r25
    1758:	88 0f       	add	r24, r24
    175a:	82 2b       	or	r24, r18
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	99 1f       	adc	r25, r25
    1762:	99 27       	eor	r25, r25
    1764:	99 1f       	adc	r25, r25
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	9c 93       	st	X, r25
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	21 15       	cp	r18, r1
    176e:	31 05       	cpc	r19, r1
    1770:	a9 f5       	brne	.+106    	; 0x17dc <__unpack_f+0x9e>
    1772:	41 15       	cp	r20, r1
    1774:	51 05       	cpc	r21, r1
    1776:	61 05       	cpc	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	11 f4       	brne	.+4      	; 0x1780 <__unpack_f+0x42>
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	37 c0       	rjmp	.+110    	; 0x17ee <__unpack_f+0xb0>
    1780:	82 e8       	ldi	r24, 0x82	; 130
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	13 96       	adiw	r26, 0x03	; 3
    1786:	9c 93       	st	X, r25
    1788:	8e 93       	st	-X, r24
    178a:	12 97       	sbiw	r26, 0x02	; 2
    178c:	9a 01       	movw	r18, r20
    178e:	ab 01       	movw	r20, r22
    1790:	67 e0       	ldi	r22, 0x07	; 7
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	44 1f       	adc	r20, r20
    1798:	55 1f       	adc	r21, r21
    179a:	6a 95       	dec	r22
    179c:	d1 f7       	brne	.-12     	; 0x1792 <__unpack_f+0x54>
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	8c 93       	st	X, r24
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <__unpack_f+0x80>
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	44 1f       	adc	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	12 96       	adiw	r26, 0x02	; 2
    17ae:	8d 91       	ld	r24, X+
    17b0:	9c 91       	ld	r25, X
    17b2:	13 97       	sbiw	r26, 0x03	; 3
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	13 96       	adiw	r26, 0x03	; 3
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
    17bc:	12 97       	sbiw	r26, 0x02	; 2
    17be:	20 30       	cpi	r18, 0x00	; 0
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	38 07       	cpc	r19, r24
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	48 07       	cpc	r20, r24
    17c8:	80 e4       	ldi	r24, 0x40	; 64
    17ca:	58 07       	cpc	r21, r24
    17cc:	58 f3       	brcs	.-42     	; 0x17a4 <__unpack_f+0x66>
    17ce:	14 96       	adiw	r26, 0x04	; 4
    17d0:	2d 93       	st	X+, r18
    17d2:	3d 93       	st	X+, r19
    17d4:	4d 93       	st	X+, r20
    17d6:	5c 93       	st	X, r21
    17d8:	17 97       	sbiw	r26, 0x07	; 7
    17da:	08 95       	ret
    17dc:	2f 3f       	cpi	r18, 0xFF	; 255
    17de:	31 05       	cpc	r19, r1
    17e0:	79 f4       	brne	.+30     	; 0x1800 <__unpack_f+0xc2>
    17e2:	41 15       	cp	r20, r1
    17e4:	51 05       	cpc	r21, r1
    17e6:	61 05       	cpc	r22, r1
    17e8:	71 05       	cpc	r23, r1
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <__unpack_f+0xb4>
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	8c 93       	st	X, r24
    17f0:	08 95       	ret
    17f2:	64 ff       	sbrs	r22, 4
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <__unpack_f+0xbe>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	8c 93       	st	X, r24
    17fa:	12 c0       	rjmp	.+36     	; 0x1820 <__unpack_f+0xe2>
    17fc:	1c 92       	st	X, r1
    17fe:	10 c0       	rjmp	.+32     	; 0x1820 <__unpack_f+0xe2>
    1800:	2f 57       	subi	r18, 0x7F	; 127
    1802:	30 40       	sbci	r19, 0x00	; 0
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	3c 93       	st	X, r19
    1808:	2e 93       	st	-X, r18
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	8c 93       	st	X, r24
    1810:	87 e0       	ldi	r24, 0x07	; 7
    1812:	44 0f       	add	r20, r20
    1814:	55 1f       	adc	r21, r21
    1816:	66 1f       	adc	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	8a 95       	dec	r24
    181c:	d1 f7       	brne	.-12     	; 0x1812 <__unpack_f+0xd4>
    181e:	70 64       	ori	r23, 0x40	; 64
    1820:	14 96       	adiw	r26, 0x04	; 4
    1822:	4d 93       	st	X+, r20
    1824:	5d 93       	st	X+, r21
    1826:	6d 93       	st	X+, r22
    1828:	7c 93       	st	X, r23
    182a:	17 97       	sbiw	r26, 0x07	; 7
    182c:	08 95       	ret

0000182e <__fpcmp_parts_f>:
    182e:	1f 93       	push	r17
    1830:	dc 01       	movw	r26, r24
    1832:	fb 01       	movw	r30, r22
    1834:	9c 91       	ld	r25, X
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	08 f4       	brcc	.+2      	; 0x183c <__fpcmp_parts_f+0xe>
    183a:	47 c0       	rjmp	.+142    	; 0x18ca <__fpcmp_parts_f+0x9c>
    183c:	80 81       	ld	r24, Z
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	08 f4       	brcc	.+2      	; 0x1844 <__fpcmp_parts_f+0x16>
    1842:	43 c0       	rjmp	.+134    	; 0x18ca <__fpcmp_parts_f+0x9c>
    1844:	94 30       	cpi	r25, 0x04	; 4
    1846:	51 f4       	brne	.+20     	; 0x185c <__fpcmp_parts_f+0x2e>
    1848:	11 96       	adiw	r26, 0x01	; 1
    184a:	1c 91       	ld	r17, X
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	99 f5       	brne	.+102    	; 0x18b6 <__fpcmp_parts_f+0x88>
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	68 2f       	mov	r22, r24
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	61 1b       	sub	r22, r17
    1858:	71 09       	sbc	r23, r1
    185a:	3f c0       	rjmp	.+126    	; 0x18da <__fpcmp_parts_f+0xac>
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	21 f0       	breq	.+8      	; 0x1868 <__fpcmp_parts_f+0x3a>
    1860:	92 30       	cpi	r25, 0x02	; 2
    1862:	31 f4       	brne	.+12     	; 0x1870 <__fpcmp_parts_f+0x42>
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	b9 f1       	breq	.+110    	; 0x18d6 <__fpcmp_parts_f+0xa8>
    1868:	81 81       	ldd	r24, Z+1	; 0x01
    186a:	88 23       	and	r24, r24
    186c:	89 f1       	breq	.+98     	; 0x18d0 <__fpcmp_parts_f+0xa2>
    186e:	2d c0       	rjmp	.+90     	; 0x18ca <__fpcmp_parts_f+0x9c>
    1870:	11 96       	adiw	r26, 0x01	; 1
    1872:	1c 91       	ld	r17, X
    1874:	11 97       	sbiw	r26, 0x01	; 1
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	f1 f0       	breq	.+60     	; 0x18b6 <__fpcmp_parts_f+0x88>
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	18 17       	cp	r17, r24
    187e:	d9 f4       	brne	.+54     	; 0x18b6 <__fpcmp_parts_f+0x88>
    1880:	12 96       	adiw	r26, 0x02	; 2
    1882:	2d 91       	ld	r18, X+
    1884:	3c 91       	ld	r19, X
    1886:	13 97       	sbiw	r26, 0x03	; 3
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	82 17       	cp	r24, r18
    188e:	93 07       	cpc	r25, r19
    1890:	94 f0       	brlt	.+36     	; 0x18b6 <__fpcmp_parts_f+0x88>
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	bc f0       	brlt	.+46     	; 0x18c6 <__fpcmp_parts_f+0x98>
    1898:	14 96       	adiw	r26, 0x04	; 4
    189a:	8d 91       	ld	r24, X+
    189c:	9d 91       	ld	r25, X+
    189e:	0d 90       	ld	r0, X+
    18a0:	bc 91       	ld	r27, X
    18a2:	a0 2d       	mov	r26, r0
    18a4:	24 81       	ldd	r18, Z+4	; 0x04
    18a6:	35 81       	ldd	r19, Z+5	; 0x05
    18a8:	46 81       	ldd	r20, Z+6	; 0x06
    18aa:	57 81       	ldd	r21, Z+7	; 0x07
    18ac:	28 17       	cp	r18, r24
    18ae:	39 07       	cpc	r19, r25
    18b0:	4a 07       	cpc	r20, r26
    18b2:	5b 07       	cpc	r21, r27
    18b4:	18 f4       	brcc	.+6      	; 0x18bc <__fpcmp_parts_f+0x8e>
    18b6:	11 23       	and	r17, r17
    18b8:	41 f0       	breq	.+16     	; 0x18ca <__fpcmp_parts_f+0x9c>
    18ba:	0a c0       	rjmp	.+20     	; 0x18d0 <__fpcmp_parts_f+0xa2>
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	a4 07       	cpc	r26, r20
    18c2:	b5 07       	cpc	r27, r21
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <__fpcmp_parts_f+0xa8>
    18c6:	11 23       	and	r17, r17
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <__fpcmp_parts_f+0xa2>
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <__fpcmp_parts_f+0xac>
    18d0:	6f ef       	ldi	r22, 0xFF	; 255
    18d2:	7f ef       	ldi	r23, 0xFF	; 255
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <__fpcmp_parts_f+0xac>
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	cb 01       	movw	r24, r22
    18dc:	1f 91       	pop	r17
    18de:	08 95       	ret

000018e0 <__udivmodqi4>:
    18e0:	99 1b       	sub	r25, r25
    18e2:	79 e0       	ldi	r23, 0x09	; 9
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <__udivmodqi4_ep>

000018e6 <__udivmodqi4_loop>:
    18e6:	99 1f       	adc	r25, r25
    18e8:	96 17       	cp	r25, r22
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <__udivmodqi4_ep>
    18ec:	96 1b       	sub	r25, r22

000018ee <__udivmodqi4_ep>:
    18ee:	88 1f       	adc	r24, r24
    18f0:	7a 95       	dec	r23
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__udivmodqi4_loop>
    18f4:	80 95       	com	r24
    18f6:	08 95       	ret

000018f8 <__prologue_saves__>:
    18f8:	2f 92       	push	r2
    18fa:	3f 92       	push	r3
    18fc:	4f 92       	push	r4
    18fe:	5f 92       	push	r5
    1900:	6f 92       	push	r6
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	ca 1b       	sub	r28, r26
    1922:	db 0b       	sbc	r29, r27
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	09 94       	ijmp

00001930 <__epilogue_restores__>:
    1930:	2a 88       	ldd	r2, Y+18	; 0x12
    1932:	39 88       	ldd	r3, Y+17	; 0x11
    1934:	48 88       	ldd	r4, Y+16	; 0x10
    1936:	5f 84       	ldd	r5, Y+15	; 0x0f
    1938:	6e 84       	ldd	r6, Y+14	; 0x0e
    193a:	7d 84       	ldd	r7, Y+13	; 0x0d
    193c:	8c 84       	ldd	r8, Y+12	; 0x0c
    193e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1940:	aa 84       	ldd	r10, Y+10	; 0x0a
    1942:	b9 84       	ldd	r11, Y+9	; 0x09
    1944:	c8 84       	ldd	r12, Y+8	; 0x08
    1946:	df 80       	ldd	r13, Y+7	; 0x07
    1948:	ee 80       	ldd	r14, Y+6	; 0x06
    194a:	fd 80       	ldd	r15, Y+5	; 0x05
    194c:	0c 81       	ldd	r16, Y+4	; 0x04
    194e:	1b 81       	ldd	r17, Y+3	; 0x03
    1950:	aa 81       	ldd	r26, Y+2	; 0x02
    1952:	b9 81       	ldd	r27, Y+1	; 0x01
    1954:	ce 0f       	add	r28, r30
    1956:	d1 1d       	adc	r29, r1
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	ed 01       	movw	r28, r26
    1964:	08 95       	ret

00001966 <ceil>:
    1966:	5c d0       	rcall	.+184    	; 0x1a20 <__fp_trunc>
    1968:	80 f0       	brcs	.+32     	; 0x198a <ceil+0x24>
    196a:	9f 37       	cpi	r25, 0x7F	; 127
    196c:	40 f4       	brcc	.+16     	; 0x197e <ceil+0x18>
    196e:	91 11       	cpse	r25, r1
    1970:	0e f4       	brtc	.+2      	; 0x1974 <ceil+0xe>
    1972:	6e c0       	rjmp	.+220    	; 0x1a50 <__fp_szero>
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	80 e8       	ldi	r24, 0x80	; 128
    197a:	9f e3       	ldi	r25, 0x3F	; 63
    197c:	08 95       	ret
    197e:	26 f0       	brts	.+8      	; 0x1988 <ceil+0x22>
    1980:	1b 16       	cp	r1, r27
    1982:	61 1d       	adc	r22, r1
    1984:	71 1d       	adc	r23, r1
    1986:	81 1d       	adc	r24, r1
    1988:	20 c0       	rjmp	.+64     	; 0x19ca <__fp_mintl>
    198a:	3a c0       	rjmp	.+116    	; 0x1a00 <__fp_mpack>

0000198c <fmin>:
    198c:	99 0f       	add	r25, r25
    198e:	bb 0b       	sbc	r27, r27
    1990:	55 0f       	add	r21, r21
    1992:	aa 0b       	sbc	r26, r26
    1994:	e0 e8       	ldi	r30, 0x80	; 128
    1996:	fe ef       	ldi	r31, 0xFE	; 254
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	e8 07       	cpc	r30, r24
    199e:	f9 07       	cpc	r31, r25
    19a0:	70 f0       	brcs	.+28     	; 0x19be <fmin+0x32>
    19a2:	12 16       	cp	r1, r18
    19a4:	13 06       	cpc	r1, r19
    19a6:	e4 07       	cpc	r30, r20
    19a8:	f5 07       	cpc	r31, r21
    19aa:	60 f0       	brcs	.+24     	; 0x19c4 <fmin+0x38>
    19ac:	ba 17       	cp	r27, r26
    19ae:	54 f0       	brlt	.+20     	; 0x19c4 <fmin+0x38>
    19b0:	31 f4       	brne	.+12     	; 0x19be <fmin+0x32>
    19b2:	26 17       	cp	r18, r22
    19b4:	37 07       	cpc	r19, r23
    19b6:	48 07       	cpc	r20, r24
    19b8:	59 07       	cpc	r21, r25
    19ba:	a7 95       	ror	r26
    19bc:	1b f4       	brvc	.+6      	; 0x19c4 <fmin+0x38>
    19be:	b9 01       	movw	r22, r18
    19c0:	ca 01       	movw	r24, r20
    19c2:	ba 2f       	mov	r27, r26
    19c4:	b6 95       	lsr	r27
    19c6:	97 95       	ror	r25
    19c8:	08 95       	ret

000019ca <__fp_mintl>:
    19ca:	88 23       	and	r24, r24
    19cc:	71 f4       	brne	.+28     	; 0x19ea <__fp_mintl+0x20>
    19ce:	77 23       	and	r23, r23
    19d0:	21 f0       	breq	.+8      	; 0x19da <__fp_mintl+0x10>
    19d2:	98 50       	subi	r25, 0x08	; 8
    19d4:	87 2b       	or	r24, r23
    19d6:	76 2f       	mov	r23, r22
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <__fp_mintl+0x1e>
    19da:	66 23       	and	r22, r22
    19dc:	11 f4       	brne	.+4      	; 0x19e2 <__fp_mintl+0x18>
    19de:	99 27       	eor	r25, r25
    19e0:	0d c0       	rjmp	.+26     	; 0x19fc <__fp_mintl+0x32>
    19e2:	90 51       	subi	r25, 0x10	; 16
    19e4:	86 2b       	or	r24, r22
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	2a f0       	brmi	.+10     	; 0x19f6 <__fp_mintl+0x2c>
    19ec:	9a 95       	dec	r25
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	da f7       	brpl	.-10     	; 0x19ec <__fp_mintl+0x22>
    19f6:	88 0f       	add	r24, r24
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	97 f9       	bld	r25, 7
    19fe:	08 95       	ret

00001a00 <__fp_mpack>:
    1a00:	9f 3f       	cpi	r25, 0xFF	; 255
    1a02:	49 f0       	breq	.+18     	; 0x1a16 <__fp_mpack+0x16>
    1a04:	91 50       	subi	r25, 0x01	; 1
    1a06:	28 f4       	brcc	.+10     	; 0x1a12 <__fp_mpack+0x12>
    1a08:	86 95       	lsr	r24
    1a0a:	77 95       	ror	r23
    1a0c:	67 95       	ror	r22
    1a0e:	b7 95       	ror	r27
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	80 38       	cpi	r24, 0x80	; 128
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	88 0f       	add	r24, r24
    1a18:	96 95       	lsr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	97 f9       	bld	r25, 7
    1a1e:	08 95       	ret

00001a20 <__fp_trunc>:
    1a20:	25 d0       	rcall	.+74     	; 0x1a6c <__fp_splitA>
    1a22:	a0 f0       	brcs	.+40     	; 0x1a4c <__fp_trunc+0x2c>
    1a24:	be e7       	ldi	r27, 0x7E	; 126
    1a26:	b9 17       	cp	r27, r25
    1a28:	88 f4       	brcc	.+34     	; 0x1a4c <__fp_trunc+0x2c>
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	9f 38       	cpi	r25, 0x8F	; 143
    1a2e:	60 f4       	brcc	.+24     	; 0x1a48 <__fp_trunc+0x28>
    1a30:	16 16       	cp	r1, r22
    1a32:	b1 1d       	adc	r27, r1
    1a34:	67 2f       	mov	r22, r23
    1a36:	78 2f       	mov	r23, r24
    1a38:	88 27       	eor	r24, r24
    1a3a:	98 5f       	subi	r25, 0xF8	; 248
    1a3c:	f7 cf       	rjmp	.-18     	; 0x1a2c <__fp_trunc+0xc>
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b1 1d       	adc	r27, r1
    1a46:	93 95       	inc	r25
    1a48:	96 39       	cpi	r25, 0x96	; 150
    1a4a:	c8 f3       	brcs	.-14     	; 0x1a3e <__fp_trunc+0x1e>
    1a4c:	08 95       	ret

00001a4e <__fp_zero>:
    1a4e:	e8 94       	clt

00001a50 <__fp_szero>:
    1a50:	bb 27       	eor	r27, r27
    1a52:	66 27       	eor	r22, r22
    1a54:	77 27       	eor	r23, r23
    1a56:	cb 01       	movw	r24, r22
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret

00001a5c <__fp_split3>:
    1a5c:	57 fd       	sbrc	r21, 7
    1a5e:	90 58       	subi	r25, 0x80	; 128
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <__fp_splitA+0x10>
    1a66:	5f 3f       	cpi	r21, 0xFF	; 255
    1a68:	71 f0       	breq	.+28     	; 0x1a86 <__fp_splitA+0x1a>
    1a6a:	47 95       	ror	r20

00001a6c <__fp_splitA>:
    1a6c:	88 0f       	add	r24, r24
    1a6e:	97 fb       	bst	r25, 7
    1a70:	99 1f       	adc	r25, r25
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <__fp_splitA+0x20>
    1a74:	9f 3f       	cpi	r25, 0xFF	; 255
    1a76:	79 f0       	breq	.+30     	; 0x1a96 <__fp_splitA+0x2a>
    1a78:	87 95       	ror	r24
    1a7a:	08 95       	ret
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	14 06       	cpc	r1, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	f2 cf       	rjmp	.-28     	; 0x1a6a <__fp_split3+0xe>
    1a86:	46 95       	lsr	r20
    1a88:	f1 df       	rcall	.-30     	; 0x1a6c <__fp_splitA>
    1a8a:	08 c0       	rjmp	.+16     	; 0x1a9c <__fp_splitA+0x30>
    1a8c:	16 16       	cp	r1, r22
    1a8e:	17 06       	cpc	r1, r23
    1a90:	18 06       	cpc	r1, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	f1 cf       	rjmp	.-30     	; 0x1a78 <__fp_splitA+0xc>
    1a96:	86 95       	lsr	r24
    1a98:	71 05       	cpc	r23, r1
    1a9a:	61 05       	cpc	r22, r1
    1a9c:	08 94       	sec
    1a9e:	08 95       	ret

00001aa0 <_exit>:
    1aa0:	f8 94       	cli

00001aa2 <__stop_program>:
    1aa2:	ff cf       	rjmp	.-2      	; 0x1aa2 <__stop_program>
